// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// By Kurtis Dressel

#include "DresselSensor.h"
#include "../RobotMap.h"
#include "math.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DresselSensor::DresselSensor() : Subsystem("Sensor"), Configurable("DresselSensor")  {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    iRdSensor = RobotMap::sensorIRdSensor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	if (!ConfigExists()) CreateConfig();

    RetrieveConfig();
	Configure();
}

void DresselSensor::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

DresselSensor::~DresselSensor()
{

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

float DresselSensor::VoltageOutput() {
	return iRdSensor->GetVoltage(); //gets the ouput of the IR sensor, which is between 0 and 3.5
}

float DresselSensor::DistanceCalc(long double constE, long double vp1, long double vp2) {
	constE = 1/-0.8469356909;				//exponent version of the root of -0.8...
	vp1 = iRdSensor->GetVoltage();
	vp2 = vp1/16.43475905;					//first half of equation
	return pow(vp2, constE);				//second half of equation
}

bool DresselSensor::IsInRange() {
	float limit = iRdSensor->GetVoltage();
	printf("DS:Voltage %f  Voltage Limit %f\n", limit, distThreshold);
	if (limit < distThreshold) {			//doesn't accept objects less than 1 cm away or
		return false;						//greater than 80 cm away
	}
	return true;
}

void DresselSensor::RetrieveConfig()
{
	distThreshold = Preferences::GetInstance()->GetFloat("DresselSensor::DistThreshold",1.5);
}

void DresselSensor::Configure()
{

}

void DresselSensor::SaveConfig()
{
	Preferences::GetInstance()->PutFloat("DresselSensor::DistThreshold",distThreshold);
}

void DresselSensor::CreateConfig()
{
	Preferences::GetInstance()->GetFloat("DresselSensor::DistThreshold",1.5);
}

