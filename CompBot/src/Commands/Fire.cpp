// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Fire.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Fire::Fire(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
	//printf("Fire start\n");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
	Requires(Robot::intake.get());
	Requires(Robot::sensorPkg.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	//printf("Fire end\n");
    shot = false;
}


// Called just before this Command runs the first time
void Fire::Initialize() {
}

// Called repeatedly when this Command is scheduled to run
void Fire::Execute() {
	int tgtRPM = Robot::shooter->Fire1();
	if (!shot) SmartDashboard::PutNumber("Shooter Firing RPM",tgtRPM);
	if (Robot::shooter->AtRPM())
	{
		if (Robot::sensorPkg->RobotHasBall())
		{
			Robot::intake->SetIntake(true);
		}
	}
	shot = true;
}

// Make this return true when this Command no longer needs to run execute()
bool Fire::IsFinished() {
    if (Robot::sensorPkg->RobotHasBall())
   	{
   	   return false;
   	}
    return true;
}

// Called once after isFinished returns true
void Fire::End() {
	SmartDashboard::PutBoolean("Shooting",false);
	Robot::shooter->Stop();
	Robot::intake->StopIntake();
	shot = false;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Fire::Interrupted() {

}
