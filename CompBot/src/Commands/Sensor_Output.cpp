// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include <Commands/Sensor_Output.h>
#include "../RobotMap.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Sensor_Output::Sensor_Output(): Command() {
        // Use requires() here to declare subsystem dependencies
	Requires(Robot::sensorPkg.get());
	count = 0;
	hasBall = false;
	IsBallAtShooter = false;
	airp = 0.0;
	isHome = false;
	isIntake = false;
	isLow = false;
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Sensor_Output::Initialize() {
	count = 0;
}

// Called repeatedly when this Command is scheduled to run
void Sensor_Output::Execute() {

	if (count == 5)
	{
		hasBall = Robot::sensorPkg->RobotHasBall();
		SmartDashboard::PutBoolean("RobotHasBall",hasBall);

		IsBallAtShooter = Robot::sensorPkg->IsBallAtShooter();
		SmartDashboard::PutBoolean("BallAtShooter",IsBallAtShooter);
	} else if (count == 7)
	{
		isHome = Robot::sensorPkg->IsPivotAtHome();
		SmartDashboard::PutBoolean("PivotHome",isHome);

		isIntake = Robot::sensorPkg->IsPivotAtIntake();
		SmartDashboard::PutBoolean("PivotIntake",isIntake);

		isLow = Robot::sensorPkg->IsPivotAtLow();
		SmartDashboard::PutBoolean("PivotLow",isLow);
	} else if (count == 10)
	{
		airp = Robot::sensorPkg->GetAirPressure();
		SmartDashboard::PutNumber("AirSensor_Output", airp);
		count = 0;
	}
	count++;
}

// Make this return true when this Command no longer needs to run execute()
bool Sensor_Output::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void Sensor_Output::End() {
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Sensor_Output::Interrupted() {

}
