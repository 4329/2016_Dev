// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Shoot.h"
#include "../RobotMap.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Shoot::Shoot(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
	Requires(Robot::shooter.get());
	shooting = false;
	obsCount = 0;
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Shoot::Initialize() {
	obsCount = 0;
	shooting = false;
}

// Called repeatedly when this Command is scheduled to run
void Shoot::Execute() {

	// When not actively taking a shot, check to see if the operator
	// is pulling the triggers.
	if (!shooting)
    {
		// Get the operator's xbox controller state.
    	axisState = Robot::oi->getOperatorInterface()->Get_AxisState();

    	// If right trigger is pulled.
		if (axisState.RTrigger != 0)
		{
			// If the specified delay count has expired.
			if (obsCount == 0)
			{
				// Create new firing sequence command indicating the right trigger.
				theShotCmd.reset(new FireSequence(true));

				// Schedule the command to run.
				theShotCmd->Start();
				obsCount = axisState.AxisDelay;  // Sample delay count.

				// Set the indicator that a shot is being taken.
				shooting = true;
			}
		} else
		{
			// If the left trigget is pulled.
			if (axisState.LTrigger != 0)
			{
				// If the specified delay count has expired.
				if (obsCount == 0)
				{
					// Create new firing sequence command indicating the left trigger.
					theShotCmd.reset(new FireSequence(false));

					// Schedule the command to run.
					theShotCmd->Start();
					obsCount = axisState.AxisDelay; // Sample delay count.

					// Set the indicator that a shot is being taken.
					shooting = true;
				}
			}
		}
    }

    obsCount--;  // Decrement the delay counter.

	if (obsCount < 0 ) obsCount = 0;  // Don't let the counter go below 0.
}

// Make this return true when this Command no longer needs to run execute()
bool Shoot::IsFinished() {
    return Robot::shooter->IsShooting();  // Check if the shooter is still shooting.
}

// Called once after isFinished returns true
void Shoot::End() {
	theShotCmd->Cancel();  // When done cancel the fire sequence command.
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Shoot::Interrupted() {

}
