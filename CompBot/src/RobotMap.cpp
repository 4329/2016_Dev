// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Robot.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"



std::shared_ptr<CANTalon> RobotMap::driveTrainRightTalon2;
std::shared_ptr<CANTalon> RobotMap::driveTrainRightTalon1;
std::shared_ptr<CANTalon> RobotMap::driveTrainLeftTalon2;
std::shared_ptr<CANTalon> RobotMap::driveTrainLeftTalon1;
std::shared_ptr<RobotDrive> RobotMap::driveTrainRobotDrive;
std::shared_ptr<CANTalon> RobotMap::intakeTalon;
std::shared_ptr<CANTalon> RobotMap::shooterTopTalon;
std::shared_ptr<CANTalon> RobotMap::shooterBottomTalon;

std::shared_ptr<Compressor> RobotMap::theCompressor;
std::shared_ptr<DoubleSolenoid> RobotMap::stabilizerSolenoid;
std::shared_ptr<Solenoid> RobotMap::pivotStage1Solenoid;
std::shared_ptr<Solenoid> RobotMap::pivotStage2Solenoid;
std::shared_ptr<Solenoid> RobotMap::scalerSolenoid;
std::shared_ptr<Solenoid> RobotMap::deflectorSolenoid;

std::shared_ptr<PowerDistributionPanel> RobotMap::pDPPowerDistributionPanel;
std::shared_ptr<AnalogInput> RobotMap::sensorIRdSensor;
std::shared_ptr<AnalogInput> RobotMap::sensorIRdSensorFront;
std::shared_ptr<AnalogInput> RobotMap::sensorIRdSensorTower;
std::shared_ptr<AnalogInput> RobotMap::pressureSensor;
std::shared_ptr<AHRS> RobotMap::imu;


void RobotMap::init() {
    LiveWindow *lw = LiveWindow::GetInstance();

    // CANID 1
    driveTrainLeftTalon1.reset(new CANTalon(Robot::theConfig->_DriveCfg.LeftTalon1_CANID));
     lw->AddActuator("DriveTrain", "LeftTalon1", driveTrainLeftTalon1);

     // CANID 2
    driveTrainLeftTalon2.reset(new CANTalon(Robot::theConfig->_DriveCfg.LeftTalon2_CANID));
    lw->AddActuator("DriveTrain", "LeftTalon2", driveTrainLeftTalon2);

    // CANID 3
    driveTrainRightTalon1.reset(new CANTalon(Robot::theConfig->_DriveCfg.RightTalon1_CANID));
    lw->AddActuator("DriveTrain", "RightTalon1", driveTrainRightTalon1);
    
    // CANID 4
    driveTrainRightTalon2.reset(new CANTalon(Robot::theConfig->_DriveCfg.RightTalon2_CANID));
    lw->AddActuator("DriveTrain", "RightTalon2", driveTrainRightTalon2);

    driveTrainRobotDrive.reset(new RobotDrive(driveTrainLeftTalon1, driveTrainLeftTalon2,
              driveTrainRightTalon1, driveTrainRightTalon2));
    
    driveTrainRobotDrive->SetSafetyEnabled(false);
    driveTrainRobotDrive->SetExpiration(0.1);
    driveTrainRobotDrive->SetSensitivity(0.5);
    driveTrainRobotDrive->SetMaxOutput(1.0);
    driveTrainRobotDrive->SetInvertedMotor(RobotDrive::kFrontLeftMotor, true);
    driveTrainRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);

    // CANID 5
    intakeTalon.reset(new CANTalon(Robot::theConfig->_IntakeCfg.Talon_CANID));
    lw->AddActuator("Intake", "IntakeTalon", intakeTalon);
    
    // CANID 8
    // Top and bottom in the shooter code are swapped.  Will address later when time permits.
    shooterTopTalon.reset(new CANTalon(Robot::theConfig->_ShooterCfg.TopTalon_CANID)); // Top Shooter
    lw->AddActuator("Shooter", "ShooterTop", shooterTopTalon);

    // CANID 9
    shooterBottomTalon.reset(new CANTalon(Robot::theConfig->_ShooterCfg.BottomTalon_CANID)); //Bottom Shooter
    lw->AddActuator("Shooter", "ShooterBottom", shooterBottomTalon);

    theCompressor.reset(new Compressor(Robot::theConfig->_CompressorPCMID));

    // Channel 0
    scalerSolenoid.reset(new Solenoid(Robot::theConfig->_ScalarCfg.PCMID,
    		Robot::theConfig->_ScalarCfg.Channel));
    lw->AddActuator("Scaler", "scaler", scalerSolenoid);

    // Channel 1
    deflectorSolenoid.reset(new Solenoid(Robot::theConfig->_ShooterCfg.PCMID,
    		Robot::theConfig->_ShooterCfg.Deflector_Channel));
    lw->AddActuator("Shooter", "deflector", deflectorSolenoid);

    // Channels 2 3
    stabilizerSolenoid.reset(new DoubleSolenoid(Robot::theConfig->_StabilizerCfg.PCMID,
    		Robot::theConfig->_StabilizerCfg.FwdChannel,
			Robot::theConfig->_StabilizerCfg.RevChannel));
    lw->AddActuator("Stabilizer", "Stabilizer", stabilizerSolenoid);
    
    // Channel 5
    pivotStage1Solenoid.reset(new Solenoid(Robot::theConfig->_PivotCfg.PCMID,
    		Robot::theConfig->_PivotCfg.Stage1_Channel));
    lw->AddActuator("Pivot1", "PivotStage1", pivotStage1Solenoid);

    // Channel 6
    pivotStage2Solenoid.reset(new Solenoid(Robot::theConfig->_PivotCfg.PCMID,
			Robot::theConfig->_PivotCfg.Stage2_Channel));
    lw->AddActuator("Pivot2", "PivotStage2", pivotStage2Solenoid);

    // Analog 1
    sensorIRdSensorTower.reset(new AnalogInput(Robot::theConfig->_SensorCfg.Tower_AnalogChannel));
    lw->AddSensor("IR", "Tower", sensorIRdSensorTower);

    // Analog 2
    sensorIRdSensorFront.reset(new AnalogInput(Robot::theConfig->_SensorCfg.Front_AnalogChannel));
    lw->AddSensor("IR", "SensorFront", sensorIRdSensorFront);

    // Analog 3
    sensorIRdSensor.reset(new AnalogInput(Robot::theConfig->_SensorCfg.Shooter_AnalogChannel));
    lw->AddSensor("IR", "Sensor", sensorIRdSensor);

    // Analog 0
    pressureSensor.reset(new AnalogInput(Robot::theConfig->_SensorCfg.Pressure_AnalogChannel));
    lw->AddSensor("Air","Pressure", pressureSensor);

    pDPPowerDistributionPanel.reset(new PowerDistributionPanel(Robot::theConfig->_SensorCfg.PDP_CANID));
    lw->AddSensor("PDP", "PowerDistributionPanel", pDPPowerDistributionPanel);
    
    imu.reset(new AHRS(SPI::Port::kMXP));
    lw->AddSensor("Sensor","IMU",imu);
    printf("RobotMap init Complete\n");
}
