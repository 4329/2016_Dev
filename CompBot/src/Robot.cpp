// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Commands/Cal_Front_In.h"
#include "Commands/Cal_Front_Out.h"
#include "Commands/Cal_Shooter_In.h"
#include "Commands/Cal_Shooter_Out.h"
#include "Commands/Cal_Save.h"

std::unique_ptr<Robot_Config> Robot::theConfig;
std::unique_ptr<Logger> Robot::theLogger;
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<Pneumatics> Robot::pneumatics;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Pivot> Robot::pivot;
std::shared_ptr<Scaler> Robot::scaler;
std::shared_ptr<PDP> Robot::pDP;
std::shared_ptr<Shooter> Robot::shooter;
std::unique_ptr<OI> Robot::oi;
std::shared_ptr<Stabilizer> Robot::stabilizer;
std::shared_ptr<Sensors> Robot::sensorPkg;
std::unique_ptr<Command> Robot::autonomousCommand;
std::unique_ptr<Command> Robot::autonomous_simple;
std::unique_ptr<Command> Robot::sensorOut;
std::shared_ptr<Video> Robot::videoSys;

Task* videoTask;

// This is the function that will be run in the Robot Cam thread.
void VideoT() {
    Robot::videoSys->Run();
}

void Robot::RobotInit() {
	theLogger.reset(new Logger());

	// Get the complete set of configuration parameters before any other initialization occurs.
	theConfig.reset(new Robot_Config());

	theLogger->Set_LoggingLevel(theConfig->_LogLevel);
	theLogger->StartLog();

	// Initialize all WPILIB components or fundamental objects.
	RobotMap::init();

	// Begin subsystem creation and initialization.
	sensorPkg.reset(new Sensors());
	if (sensorPkg.get() != nullptr) {
		printf("Robot sensorPkg Complete\n");
	} else
	{
		printf("Robot sensorPkg null ptr\n");
	}

	driveTrain.reset(new DriveTrain());
	if (driveTrain.get() != nullptr) {
		printf("Robot driveTrain Complete\n");
	} else
	{
		printf("Robot driveTrain null ptr\n");
	}

    pneumatics.reset(new Pneumatics());
    if (pneumatics.get() != nullptr){
        printf("Robot pneumatics Complete\n");
    } else
    {
    	printf("Robot pneumatics null ptr\n");
    }

    intake.reset(new Intake());
    if (intake.get() != nullptr){
        printf("Robot intake Complete\n");
    } else
    {
    	printf("Robot intake null ptr\n");
    }

    pivot.reset(new Pivot());
    if (pivot.get() != nullptr){
        printf("Robot Pivot Complete\n");
    } else
    {
    	printf("Robot Pivot null ptr\n");
    }

    scaler.reset(new Scaler());
    if (scaler.get() != nullptr){
        printf("Robot scalar Complete\n");
    } else
    {
    	printf("Robot scalar null ptr\n");
    }

    pDP.reset(new PDP());
    if (pDP.get() != nullptr){
        printf("Robot Pdp Complete\n");
    } else
    {
    	printf("Robot Pdp null ptr\n");
    }

    shooter.reset(new Shooter());
    if (shooter.get() != nullptr){
        printf("Robot Shooter Complete\n");
    } else
    {
    	printf("Robot Shooter null ptr\n");
    }

    oi.reset(new OI());
    if (oi.get() != nullptr){
	    printf("Robot OI Complete\n");
    } else
    {
    	printf("Robot OI null ptr\n");
    }

	stabilizer.reset(new Stabilizer());
	if (stabilizer.get() != nullptr){
	    printf("Robot stabilizer Complete\n");
	} else
	{
		printf("Robot stabilizer null ptr\n");
	}

	sensorOut.reset(new Sensor_Output());
	if (sensorOut.get() != nullptr) {
		printf("Robot sensorOut Complete\n");
	} else
	{
		printf("Robot sensorOut null ptr\n");
	}

	// Prepare Autonomous Mode.
    if (Robot::theConfig->_AutoCfg.AutonomousMode_Type == 1)
    {
    	autonomousCommand.reset(new Autonomous_Simple());
    	printf("Robot Autonomous Simple Selected\n");
    } else
    {
    	autonomousCommand.reset(new AutonomousCommand());
    	printf("Robot No Autonomous Selected\n");
    }


    // Create Robot Cam System.
	videoSys.reset(new Video());

	// Initialize Robot Cam Subsystem.
    videoSys->Init(&(theConfig->_VideoCfg),oi->getDriverInterface().get());

    // Create Task (thread) to process video from Robot Cam.
    videoTask = new Task("Video",(FUNCPTR)VideoT,Task::kDefaultPriority + 1);

    // Separate thread linear execution from the linear execution of main robot thread
    videoTask->detach();

    if (stabilizer.get() != nullptr) stabilizer->Retract();
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();

	// Moved this command here so that it will run immediately after RobotInit completes
	if (sensorOut.get() != nullptr)
		sensorOut->Start();
}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (stabilizer.get() != nullptr) stabilizer->Retract();

	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();

// Check to be sure the sensors are reporting back to the DriverStation.
	if (sensorOut.get() != nullptr)
		if (!sensorOut->IsRunning()) sensorOut->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();

	// Check to be sure the sensors are reporting back to the DriverStation.
	if (sensorOut.get() != nullptr)
		if (!sensorOut->IsRunning()) sensorOut->Start();

	if (stabilizer.get() != nullptr) stabilizer->Retract();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TestInit(){
	// Check to be sure the sensors are reporting back to the DriverStation.
	if (sensorOut.get() != nullptr)
		if (!sensorOut->IsRunning()) sensorOut->Start();
}


void Robot::TestPeriodic() {
    SmartDashboard::PutData("Set Front In", new Cal_Front_In());
    SmartDashboard::PutData("Set Front Out", new Cal_Front_Out());
    SmartDashboard::PutData("Set Shooter In", new Cal_Shooter_In());
    SmartDashboard::PutData("Set Shooter Out", new Cal_Shooter_Out());
    SmartDashboard::PutData("Calibration Save", new Cal_Save());
	lw->Run();
}

START_ROBOT_CLASS(Robot);

