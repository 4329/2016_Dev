// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Brake.h"
#include "../RobotMap.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES


Brake::Brake() : Subsystem("Brake"), Configurable("Brake") {

	brakeSolenoid = RobotMap::brakeSolenoid;
	ActiveIsEngaged = true;

	CheckConfig("PCMID");
	Configure();
}
    
Brake::~Brake()
{

}

void Brake::RetrieveConfig()
{
	PCMID = Preferences::GetInstance()->GetInt("Brake::PCMID",0);
	Channel = Preferences::GetInstance()->GetInt("Brake::Channel",4);
	ActiveIsEngaged = Preferences::GetInstance()->GetBoolean("Brake::ActiveIsEngaged",false);
}

void Brake::SaveConfig()
{
	Preferences::GetInstance()->PutInt("Brake::PCMID",PCMID);
	Preferences::GetInstance()->PutInt("Brake::Channel",Channel);
	Preferences::GetInstance()->PutBoolean("Brake::ActiveIsEngaged",ActiveIsEngaged);
}

void Brake::Configure()
{
	// Do Nothing.
}

void Brake::LiveConfigure()
{
	RetrieveConfig();
	Configure();
}


void Brake::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Brake::Engage()
{
	brakeSolenoid->Set(ActiveIsEngaged);
}

void Brake::Release()
{
	brakeSolenoid->Set(!ActiveIsEngaged);
}

bool Brake::IsEngaged()
{
	bool retval = brakeSolenoid->Get();

	if ((ActiveIsEngaged && retval) || (!ActiveIsEngaged && !retval))
	{
		return true;
	}
	return false;
}
