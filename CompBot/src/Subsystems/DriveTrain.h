// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../Configurable.h"
#include "AHRS.h"
#include "../Xbox360_Controller.h"
#include "PID_Control.h"
/**
 *
 *
 * @author ExampleAuthor
 */

enum DriveType
{
	DriveType_Arcade,
	DriveType_Tank,
	DriveType_Split,
	DriveType_end
};


class DriveTrain_Config;

class DriveTrain: public Subsystem, public PIDOutput, public Configurable {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<CANTalon> rightTalon2;
	std::shared_ptr<CANTalon> rightTalon1;
	std::shared_ptr<CANTalon> leftTalon2;
	std::shared_ptr<CANTalon> leftTalon1;
	std::shared_ptr<RobotDrive> robotDrive;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	DriveTrain_Config *myConfig;

	std::shared_ptr<CANTalon> leftMaster;
	std::shared_ptr<CANTalon> leftSlave;
	std::shared_ptr<CANTalon> rightMaster;
	std::shared_ptr<CANTalon> rightSlave;

	float  leftMotorOutput;
	float  rightMotorOutput;
	bool   positioning;
	double ldistance;
	double rdistance;
	double rZeroPoint;
	double lZeroPoint;
	double rLastPosDelta;
	double lLastPosDelta;
	bool   hasMoved;

	bool  autoEnabled;
	bool  turning;
	bool  yawLock;
	float holdYaw;
	bool  yawFlipped;
	float lastturn;

	DriveType myType;

	std::shared_ptr<PID_Control> turnController;
	std::shared_ptr<PID_Control> linearController;

	Multi_PID posPID;

public:
	DriveTrain();
	virtual ~DriveTrain();
	virtual void RetrieveConfig();
	virtual void Configure();
	virtual void LiveConfigure();
	virtual void SaveConfig();
	virtual void PIDWrite(float output);

	void InitDefaultCommand();

	void SetDriveType(DriveType type);
	void SetDrive(XBOX_AxisState axisState);

	void SetDrive_Arcade(float x, float y, bool highRate = false);
	void SetDrive_Tank(float left, float right, bool highRate = false);
	void SetDrive_Split(float turn, float throttle, bool highRate = false);
    void Stop();

	void Enable_Auto_Mode();
    void Zero_Encoders();
    void Zero_DriveEncoders();

	void AutoDrive_SetYawLock(bool lock);


	void AutoDrive_Rotate(float rotate);  // In Degrees  0 > right ; 0 < left
	bool On_Target();

	void AutoDrive_SetDistance(float inches);
	void AutoDrive_Move(float throttle);
	bool AtCommandedPosition();


	double Get_CurrentPosition();
	double Get_PulsesPerInch();

	void SetDrive_Auto(float turn, float throttle);
    void Disable_Auto_Mode();

	void Set_PositionMode();
	void Set_VoltageMode();
	float Limit(float num);

};

#endif
