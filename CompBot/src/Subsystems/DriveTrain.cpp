// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Teleop_Drive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    rightTalon2 = RobotMap::driveTrainRightTalon2;
    rightTalon1 = RobotMap::driveTrainRightTalon1;
    leftTalon2 = RobotMap::driveTrainLeftTalon2;
    leftTalon1 = RobotMap::driveTrainLeftTalon1;
    robotDrive = RobotMap::driveTrainRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    myConfig = new DriveTrain_Config;

	leftMotorOutput = 0.0;
	rightMotorOutput = 0.0;
	positioning = false;
	ldistance = 0.0;
	rdistance = 0.0;
	rZeroPoint = 0.0;
	lZeroPoint = 0.0;
	lLastPosDelta = 0.0;
	rLastPosDelta = 0.0;
	hasMoved = false;

    RetrieveConfig();
	Configure();
}


DriveTrain::~DriveTrain()
{
	delete myConfig;
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new Teleop_Drive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::RetrieveConfig()
{
	myConfig->DriveTrain_HighSpeed = Preferences::GetInstance()->GetFloat("DriveTrain::HighSpeed");
	myConfig->DriveTrain_LowSpeed = Preferences::GetInstance()->GetFloat("DriveTrain::LowSpeed");
	myConfig->DriveTrain_QuadEncoder_PulsesPerDegree = Preferences::GetInstance()->GetFloat("DriveTrain::QuadEncoder::PulsesPerDegree");

	myConfig->DriveTrain_RightTalon1_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon1::Enabled",true);
	myConfig->DriveTrain_RightTalon1_CANID = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon1::CANID");
	myConfig->DriveTrain_RightTalon1_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon1::Reversed");
	myConfig->DriveTrain_RightTalon1_HasSensor = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon1::HasSensor");
	myConfig->DriveTrain_RightTalon1_SensorReversed = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon1::SensorReversed");
	myConfig->DriveTrain_RightTalon1_EnablePID = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon1::EnablePID");
	myConfig->DriveTrain_RightTalon1_Profile_0_PID_P = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::0::PID::P");
	myConfig->DriveTrain_RightTalon1_Profile_0_PID_I = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::0::PID::I");
	myConfig->DriveTrain_RightTalon1_Profile_0_PID_D = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::0::PID::D");
	myConfig->DriveTrain_RightTalon1_Profile_0_PID_F = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::0::PID::F");
	myConfig->DriveTrain_RightTalon1_Profile_0_IZone = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon1::Profile::0::IZone");
	myConfig->DriveTrain_RightTalon1_Profile_0_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon1::Profile::0::EnableCLRampRate");
	myConfig->DriveTrain_RightTalon1_Profile_0_CLRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::0::CLRampRate");
	myConfig->DriveTrain_RightTalon1_Profile_1_PID_P = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::1::PID::P");
	myConfig->DriveTrain_RightTalon1_Profile_1_PID_I = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::1::PID::I");
	myConfig->DriveTrain_RightTalon1_Profile_1_PID_D = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::1::PID::D");
	myConfig->DriveTrain_RightTalon1_Profile_1_PID_F = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::1::PID::F");
	myConfig->DriveTrain_RightTalon1_Profile_1_IZone = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon1::Profile::1::IZone");
	myConfig->DriveTrain_RightTalon1_Profile_1_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon1::Profile::1::EnableCLRampRate");
	myConfig->DriveTrain_RightTalon1_Profile_1_CLRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::Profile::1::CLRampRate");
	myConfig->DriveTrain_RightTalon1_EnableVoltRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon1::EnableVoltRampRate");
	myConfig->DriveTrain_RightTalon1_VoltRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon1::VoltRampRate");
	myConfig->DriveTrain_RightTalon1_PID_CL_PM_Error = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon1::PID::CL::PM::Error");
	myConfig->DriveTrain_RightTalon1_QuadEncoder_PulsesPerInch = Preferences::GetInstance()->GetFloat("DriveTrain::RightTalon1::QuadEncoder::PulsesPerInch");
    myConfig->DriveTrain_RightTalon1_Slaved = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon1::Slaved",false);
    myConfig->DriveTrain_RightTalon1_MasterCANID = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon1::MasterCANID",0);


	myConfig->DriveTrain_RightTalon2_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon2::Enabled",true);
	myConfig->DriveTrain_RightTalon2_CANID = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon2::CANID");
	myConfig->DriveTrain_RightTalon2_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon2::Reversed");
	myConfig->DriveTrain_RightTalon2_HasSensor = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon2::HasSensor");
	myConfig->DriveTrain_RightTalon2_SensorReversed = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon2::SensorReversed");
	myConfig->DriveTrain_RightTalon2_EnablePID = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon2::EnablePID");
	myConfig->DriveTrain_RightTalon2_Profile_0_PID_P = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::0::PID::P");
	myConfig->DriveTrain_RightTalon2_Profile_0_PID_I = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::0::PID::I");
	myConfig->DriveTrain_RightTalon2_Profile_0_PID_D = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::0::PID::D");
	myConfig->DriveTrain_RightTalon2_Profile_0_PID_F = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::0::PID::F");
	myConfig->DriveTrain_RightTalon2_Profile_0_IZone = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon2::Profile::0::IZone");
	myConfig->DriveTrain_RightTalon2_Profile_0_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon2::Profile::0::EnableCLRampRate");
	myConfig->DriveTrain_RightTalon2_Profile_0_CLRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::0::CLRampRate");
	myConfig->DriveTrain_RightTalon2_Profile_1_PID_P = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::1::PID::P");
	myConfig->DriveTrain_RightTalon2_Profile_1_PID_I = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::1::PID::I");
	myConfig->DriveTrain_RightTalon2_Profile_1_PID_D = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::1::PID::D");
	myConfig->DriveTrain_RightTalon2_Profile_1_PID_F = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::1::PID::F");
	myConfig->DriveTrain_RightTalon2_Profile_1_IZone = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon2::Profile::1::IZone");
	myConfig->DriveTrain_RightTalon2_Profile_1_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon2::Profile::1::EnableCLRampRate");
	myConfig->DriveTrain_RightTalon2_Profile_1_CLRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::Profile::1::CLRampRate");
	myConfig->DriveTrain_RightTalon2_EnableVoltRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon2::EnableVoltRampRate");
	myConfig->DriveTrain_RightTalon2_VoltRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::RightTalon2::VoltRampRate");
	myConfig->DriveTrain_RightTalon2_PID_CL_PM_Error = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon2::PID::CL::PM::Error");
	myConfig->DriveTrain_RightTalon2_QuadEncoder_PulsesPerInch = Preferences::GetInstance()->GetFloat("DriveTrain::RightTalon2::QuadEncoder::PulsesPerInch");
    myConfig->DriveTrain_RightTalon2_Slaved = Preferences::GetInstance()->GetBoolean("DriveTrain::RightTalon2::Slaved",false);
    myConfig->DriveTrain_RightTalon2_MasterCANID = Preferences::GetInstance()->GetInt("DriveTrain::RightTalon2::MasterCANID",0);


	myConfig->DriveTrain_LeftTalon1_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon1::Enabled",true);
	myConfig->DriveTrain_LeftTalon1_CANID = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon1::CANID");
	myConfig->DriveTrain_LeftTalon1_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon1::Reversed");
	myConfig->DriveTrain_LeftTalon1_HasSensor = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon1::HasSensor");
	myConfig->DriveTrain_LeftTalon1_SensorReversed = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon1::SensorReversed");
	myConfig->DriveTrain_LeftTalon1_EnablePID = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon1::EnablePID");
	myConfig->DriveTrain_LeftTalon1_Profile_0_PID_P = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::0::PID::P");
	myConfig->DriveTrain_LeftTalon1_Profile_0_PID_I = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::0::PID::I");
	myConfig->DriveTrain_LeftTalon1_Profile_0_PID_D = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::0::PID::D");
	myConfig->DriveTrain_LeftTalon1_Profile_0_PID_F = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::0::PID::F");
	myConfig->DriveTrain_LeftTalon1_Profile_0_IZone = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon1::Profile::0::IZone");
	myConfig->DriveTrain_LeftTalon1_Profile_0_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon1::Profile::0::EnableCLRampRate");
	myConfig->DriveTrain_LeftTalon1_Profile_0_CLRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::0::CLRampRate");
	myConfig->DriveTrain_LeftTalon1_Profile_1_PID_P = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::1::PID::P");
	myConfig->DriveTrain_LeftTalon1_Profile_1_PID_I = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::1::PID::I");
	myConfig->DriveTrain_LeftTalon1_Profile_1_PID_D = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::1::PID::D");
	myConfig->DriveTrain_LeftTalon1_Profile_1_PID_F = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::1::PID::F");
	myConfig->DriveTrain_LeftTalon1_Profile_1_IZone = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon1::Profile::1::IZone");
	myConfig->DriveTrain_LeftTalon1_Profile_1_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon1::Profile::1::EnableCLRampRate");
	myConfig->DriveTrain_LeftTalon1_Profile_1_CLRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::Profile::1::CLRampRate");
	myConfig->DriveTrain_LeftTalon1_EnableVoltRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon1::EnableVoltRampRate");
	myConfig->DriveTrain_LeftTalon1_VoltRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon1::VoltRampRate");
	myConfig->DriveTrain_LeftTalon1_PID_CL_PM_Error = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon1::PID::CL::PM::Error");
	myConfig->DriveTrain_LeftTalon1_QuadEncoder_PulsesPerInch = Preferences::GetInstance()->GetFloat("DriveTrain::LeftTalon1::QuadEncoder::PulsesPerInch");
    myConfig->DriveTrain_LeftTalon1_Slaved = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon1::Slaved",false);
    myConfig->DriveTrain_LeftTalon1_MasterCANID = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon1::MasterCANID",0);


	myConfig->DriveTrain_LeftTalon2_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon2::Enabled",true);
	myConfig->DriveTrain_LeftTalon2_CANID = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon2::CANID");
	myConfig->DriveTrain_LeftTalon2_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon2::Reversed");
	myConfig->DriveTrain_LeftTalon2_HasSensor = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon2::HasSensor");
	myConfig->DriveTrain_LeftTalon2_SensorReversed = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon2::SensorReversed");
	myConfig->DriveTrain_LeftTalon2_EnablePID = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon2::EnablePID");
	myConfig->DriveTrain_LeftTalon2_Profile_0_PID_P = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::0::PID::P");
	myConfig->DriveTrain_LeftTalon2_Profile_0_PID_I = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::0::PID::I");
	myConfig->DriveTrain_LeftTalon2_Profile_0_PID_D = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::0::PID::D");
	myConfig->DriveTrain_LeftTalon2_Profile_0_PID_F = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::0::PID::F");
	myConfig->DriveTrain_LeftTalon2_Profile_0_IZone = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon2::Profile::0::IZone");
	myConfig->DriveTrain_LeftTalon2_Profile_0_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon2::Profile::0::EnableCLRampRate");
	myConfig->DriveTrain_LeftTalon2_Profile_0_CLRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::0::CLRampRate");
	myConfig->DriveTrain_LeftTalon2_Profile_1_PID_P = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::1::PID::P");
	myConfig->DriveTrain_LeftTalon2_Profile_1_PID_I = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::1::PID::I");
	myConfig->DriveTrain_LeftTalon2_Profile_1_PID_D = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::1::PID::D");
	myConfig->DriveTrain_LeftTalon2_Profile_1_PID_F = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::1::PID::F");
	myConfig->DriveTrain_LeftTalon2_Profile_1_IZone = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon2::Profile::1::IZone");
	myConfig->DriveTrain_LeftTalon2_Profile_1_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon2::Profile::1::EnableCLRampRate");
	myConfig->DriveTrain_LeftTalon2_Profile_1_CLRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::Profile::1::CLRampRate");
	myConfig->DriveTrain_LeftTalon2_EnableVoltRampRate = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon2::EnableVoltRampRate");
	myConfig->DriveTrain_LeftTalon2_VoltRampRate = Preferences::GetInstance()->GetDouble("DriveTrain::LeftTalon2::VoltRampRate");
	myConfig->DriveTrain_LeftTalon2_PID_CL_PM_Error = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon2::PID::CL::PM::Error");
	myConfig->DriveTrain_LeftTalon2_QuadEncoder_PulsesPerInch = Preferences::GetInstance()->GetFloat("DriveTrain::LeftTalon2::QuadEncoder::PulsesPerInch");
    myConfig->DriveTrain_LeftTalon2_Slaved = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftTalon2::Slaved",false);
    myConfig->DriveTrain_LeftTalon2_MasterCANID = Preferences::GetInstance()->GetInt("DriveTrain::LeftTalon2::MasterCANID",0);

}


void DriveTrain::Configure()
{
// Left Side

	if (myConfig->DriveTrain_LeftTalon1_Enabled)
	{
		printf("DT:Configure LT1 enabled\n");
        if (myConfig->DriveTrain_LeftTalon1_HasSensor)
        {
        	leftTalon1->SetFeedbackDevice(CANTalon::QuadEncoder);
			if (myConfig->DriveTrain_LeftTalon1_SensorReversed)
			{
				leftTalon1->SetSensorDirection(true);
			} else
			{
				leftTalon1->SetSensorDirection(false);
			}
        }
        if (myConfig->DriveTrain_LeftTalon1_EnablePID)
        {
        	printf("DT:Configure LT1 PID enabled\n");
        	leftTalon1->SelectProfileSlot(0);
        	leftTalon1->SetP(myConfig->DriveTrain_LeftTalon1_Profile_0_PID_P);
        	leftTalon1->SetI(myConfig->DriveTrain_LeftTalon1_Profile_0_PID_I);
        	leftTalon1->SetD(myConfig->DriveTrain_LeftTalon1_Profile_0_PID_D);
        	leftTalon1->SetF(myConfig->DriveTrain_LeftTalon1_Profile_0_PID_F);
			if (myConfig->DriveTrain_LeftTalon1_Profile_0_EnableCLRampRate)
			{
				leftTalon1->SetCloseLoopRampRate(myConfig->DriveTrain_LeftTalon1_Profile_0_CLRampRate);
			}

			leftTalon1->SetIzone(myConfig->DriveTrain_LeftTalon1_Profile_0_IZone);

			leftTalon1->SelectProfileSlot(1);
			leftTalon1->SetP(myConfig->DriveTrain_LeftTalon1_Profile_1_PID_P);
			leftTalon1->SetI(myConfig->DriveTrain_LeftTalon1_Profile_1_PID_I);
			leftTalon1->SetD(myConfig->DriveTrain_LeftTalon1_Profile_1_PID_D);
			leftTalon1->SetF(myConfig->DriveTrain_LeftTalon1_Profile_1_PID_F);
			if (myConfig->DriveTrain_LeftTalon1_Profile_1_EnableCLRampRate)
			{
				leftTalon1->SetCloseLoopRampRate(myConfig->DriveTrain_LeftTalon1_Profile_1_CLRampRate);
			}

			leftTalon1->SetIzone(myConfig->DriveTrain_LeftTalon1_Profile_1_IZone);
        }

		if(myConfig->DriveTrain_LeftTalon1_EnableVoltRampRate)
		{
			leftTalon1->SetVoltageRampRate(myConfig->DriveTrain_LeftTalon1_VoltRampRate);
		}

		if(myConfig->DriveTrain_LeftTalon1_Slaved)
		{
			leftTalon1->SetControlMode(CANSpeedController::kFollower);
			leftTalon1->Set(myConfig->DriveTrain_LeftTalon1_MasterCANID);
		}

	}

	if (myConfig->DriveTrain_LeftTalon2_Enabled)
	{
		printf("DT:Configure LT2 enabled\n");
        if (myConfig->DriveTrain_LeftTalon2_HasSensor)
        {
        	leftTalon2->SetFeedbackDevice(CANTalon::QuadEncoder);
			if (myConfig->DriveTrain_LeftTalon2_SensorReversed)
			{
				leftTalon2->SetSensorDirection(true);
			} else
			{
				leftTalon2->SetSensorDirection(false);
			}
        }
        if (myConfig->DriveTrain_LeftTalon2_EnablePID)
        {
        	printf("DT:Configure LT2 PID enabled\n");
        	leftTalon2->SelectProfileSlot(0);
        	leftTalon2->SetP(myConfig->DriveTrain_LeftTalon2_Profile_0_PID_P);
        	leftTalon2->SetI(myConfig->DriveTrain_LeftTalon2_Profile_0_PID_I);
        	leftTalon2->SetD(myConfig->DriveTrain_LeftTalon2_Profile_0_PID_D);
        	leftTalon2->SetF(myConfig->DriveTrain_LeftTalon2_Profile_0_PID_F);
			if (myConfig->DriveTrain_LeftTalon2_Profile_0_EnableCLRampRate)
			{
				leftTalon2->SetCloseLoopRampRate(myConfig->DriveTrain_LeftTalon2_Profile_0_CLRampRate);
			}

			leftTalon2->SetIzone(myConfig->DriveTrain_LeftTalon2_Profile_0_IZone);

			leftTalon2->SelectProfileSlot(1);
			leftTalon2->SetP(myConfig->DriveTrain_LeftTalon2_Profile_1_PID_P);
			leftTalon2->SetI(myConfig->DriveTrain_LeftTalon2_Profile_1_PID_I);
			leftTalon2->SetD(myConfig->DriveTrain_LeftTalon2_Profile_1_PID_D);
			leftTalon2->SetF(myConfig->DriveTrain_LeftTalon2_Profile_1_PID_F);
			if (myConfig->DriveTrain_LeftTalon2_Profile_1_EnableCLRampRate)
			{
				leftTalon2->SetCloseLoopRampRate(myConfig->DriveTrain_LeftTalon2_Profile_1_CLRampRate);
			}

			leftTalon2->SetIzone(myConfig->DriveTrain_LeftTalon2_Profile_1_IZone);
        }

		if(myConfig->DriveTrain_LeftTalon2_EnableVoltRampRate)
		{
			leftTalon2->SetVoltageRampRate(myConfig->DriveTrain_LeftTalon2_VoltRampRate);
		}

		if(myConfig->DriveTrain_LeftTalon2_Slaved)
		{
			leftTalon2->SetControlMode(CANSpeedController::kFollower);
			leftTalon2->Set(myConfig->DriveTrain_LeftTalon2_MasterCANID);
		}
	}


// Right Side

	if (myConfig->DriveTrain_RightTalon1_Enabled)
	{
		printf("DT:Configure RT1 enabled\n");
        if (myConfig->DriveTrain_RightTalon1_HasSensor)
        {
        	rightTalon1->SetFeedbackDevice(CANTalon::QuadEncoder);
			if (myConfig->DriveTrain_RightTalon1_SensorReversed)
			{
				rightTalon1->SetSensorDirection(true);
			} else
			{
				rightTalon1->SetSensorDirection(false);
			}
        }
        if (myConfig->DriveTrain_RightTalon1_EnablePID)
        {
        	printf("DT:Configure RT1 PID enabled\n");
        	rightTalon1->SelectProfileSlot(0);
        	rightTalon1->SetP(myConfig->DriveTrain_RightTalon1_Profile_0_PID_P);
        	rightTalon1->SetI(myConfig->DriveTrain_RightTalon1_Profile_0_PID_I);
        	rightTalon1->SetD(myConfig->DriveTrain_RightTalon1_Profile_0_PID_D);
        	rightTalon1->SetF(myConfig->DriveTrain_RightTalon1_Profile_0_PID_F);
			if (myConfig->DriveTrain_RightTalon1_Profile_0_EnableCLRampRate)
			{
				rightTalon1->SetCloseLoopRampRate(myConfig->DriveTrain_RightTalon1_Profile_0_CLRampRate);
			}

			rightTalon1->SetIzone(myConfig->DriveTrain_RightTalon1_Profile_0_IZone);

			rightTalon1->SelectProfileSlot(1);
			rightTalon1->SetP(myConfig->DriveTrain_RightTalon1_Profile_1_PID_P);
			rightTalon1->SetI(myConfig->DriveTrain_RightTalon1_Profile_1_PID_I);
			rightTalon1->SetD(myConfig->DriveTrain_RightTalon1_Profile_1_PID_D);
			rightTalon1->SetF(myConfig->DriveTrain_RightTalon1_Profile_1_PID_F);
			if (myConfig->DriveTrain_RightTalon1_Profile_1_EnableCLRampRate)
			{
				rightTalon1->SetCloseLoopRampRate(myConfig->DriveTrain_RightTalon1_Profile_1_CLRampRate);
			}

			rightTalon1->SetIzone(myConfig->DriveTrain_RightTalon1_Profile_1_IZone);
        }

		if(myConfig->DriveTrain_RightTalon1_EnableVoltRampRate)
		{
			rightTalon1->SetVoltageRampRate(myConfig->DriveTrain_RightTalon1_VoltRampRate);
		}

		if(myConfig->DriveTrain_RightTalon1_Slaved)
		{
			rightTalon1->SetControlMode(CANSpeedController::kFollower);
			rightTalon1->Set(myConfig->DriveTrain_RightTalon1_MasterCANID);
		}
	}

	if (myConfig->DriveTrain_RightTalon2_Enabled)
	{
		printf("DT:Configure RT2 enabled\n");
        if (myConfig->DriveTrain_RightTalon2_HasSensor)
        {
        	rightTalon2->SetFeedbackDevice(CANTalon::QuadEncoder);
			if (myConfig->DriveTrain_RightTalon2_SensorReversed)
			{
				rightTalon2->SetSensorDirection(true);
			} else
			{
				rightTalon2->SetSensorDirection(false);
			}
        }
        if (myConfig->DriveTrain_RightTalon2_EnablePID)
        {
        	printf("DT:Configure RT2 PID enabled\n");
        	rightTalon2->SelectProfileSlot(0);
        	rightTalon2->SetP(myConfig->DriveTrain_RightTalon2_Profile_0_PID_P);
        	rightTalon2->SetI(myConfig->DriveTrain_RightTalon2_Profile_0_PID_I);
        	rightTalon2->SetD(myConfig->DriveTrain_RightTalon2_Profile_0_PID_D);
        	rightTalon2->SetF(myConfig->DriveTrain_RightTalon2_Profile_0_PID_F);
			if (myConfig->DriveTrain_RightTalon2_Profile_0_EnableCLRampRate)
			{
				rightTalon2->SetCloseLoopRampRate(myConfig->DriveTrain_RightTalon2_Profile_0_CLRampRate);
			}

			rightTalon2->SetIzone(myConfig->DriveTrain_RightTalon2_Profile_0_IZone);

			rightTalon2->SelectProfileSlot(1);
			rightTalon2->SetP(myConfig->DriveTrain_RightTalon2_Profile_1_PID_P);
			rightTalon2->SetI(myConfig->DriveTrain_RightTalon2_Profile_1_PID_I);
			rightTalon2->SetD(myConfig->DriveTrain_RightTalon2_Profile_1_PID_D);
			rightTalon2->SetF(myConfig->DriveTrain_RightTalon2_Profile_1_PID_F);
			if (myConfig->DriveTrain_RightTalon2_Profile_1_EnableCLRampRate)
			{
				rightTalon2->SetCloseLoopRampRate(myConfig->DriveTrain_RightTalon2_Profile_1_CLRampRate);
			}

			rightTalon2->SetIzone(myConfig->DriveTrain_RightTalon2_Profile_1_IZone);
        }

		if(myConfig->DriveTrain_RightTalon2_EnableVoltRampRate)
		{
			rightTalon2->SetVoltageRampRate(myConfig->DriveTrain_RightTalon2_VoltRampRate);
		}
		if(myConfig->DriveTrain_RightTalon2_Slaved)
		{
			rightTalon2->SetControlMode(CANSpeedController::kFollower);
			rightTalon2->Set(myConfig->DriveTrain_RightTalon2_MasterCANID);
		}
	}
}

void DriveTrain::SetDrive_Arcade(float x, float y, bool highRate)
{
	float tx, ty;

	tx = Limit(x);
	ty = Limit(y);

    printf("DT X %f   Y %f\n",tx,ty);


	if (rightTalon1->GetControlMode() != CANSpeedController::kPercentVbus)
	{
		positioning = false;
		Set_VoltageMode();
	}

	if (ty > 0.0)
	{

		if (tx > 0.0)
		{
			leftMotorOutput = ty - tx;
			rightMotorOutput = std::max(ty, tx);
		}
		else if (tx < 0.0)
		{
			leftMotorOutput = std::max(ty, -tx);
			rightMotorOutput = ty + tx;
		} else
		{
			leftMotorOutput = ty;
			rightMotorOutput = ty;
		}
	}
	else
	{
		if (tx > 0.0)
		{
			leftMotorOutput = - std::max(-ty, tx);
			rightMotorOutput = ty + tx;
		}
		else if (tx < 0.0)
		{
			leftMotorOutput = ty - tx;
			rightMotorOutput = - std::max(-ty, -tx);
		} else
		{
			leftMotorOutput = ty;
			rightMotorOutput = ty;
		}
	}

	if (highRate)
	{
		leftTalon1->Set(leftMotorOutput*myConfig->DriveTrain_HighSpeed);
		leftTalon2->Set(leftMotorOutput*myConfig->DriveTrain_HighSpeed);
		rightTalon1->Set(rightMotorOutput*myConfig->DriveTrain_HighSpeed);
		rightTalon2->Set(rightMotorOutput*myConfig->DriveTrain_HighSpeed);
	} else
	{
		leftTalon1->Set(leftMotorOutput*myConfig->DriveTrain_LowSpeed);
		leftTalon2->Set(leftMotorOutput*myConfig->DriveTrain_LowSpeed);
		rightTalon1->Set(rightMotorOutput*myConfig->DriveTrain_LowSpeed);
		rightTalon2->Set(rightMotorOutput*myConfig->DriveTrain_LowSpeed);
	}
}


void DriveTrain::Stop()
{
	printf("FD-STOP\n");
	leftTalon1->Disable();
	leftTalon2->Disable();
	rightTalon1->Disable();
	rightTalon2->Disable();
	positioning = false;
}

void DriveTrain::Set_PositionMode()
{
	leftTalon1->SelectProfileSlot(1);
	leftTalon2->SelectProfileSlot(1);
	rightTalon1->SelectProfileSlot(1);
	rightTalon2->SelectProfileSlot(1);


	leftTalon1->SetControlMode(CANSpeedController::kPosition);
	rightTalon1->SetControlMode(CANSpeedController::kPosition);

	Zero_Encoders();

	leftTalon1->Set(lZeroPoint);
	leftTalon2->Set(lZeroPoint);
	rightTalon1->Set(rZeroPoint);
	rightTalon2->Set(rZeroPoint);

	leftTalon1->ClearError();
	leftTalon2->ClearError();

	rightTalon1->ClearError();
	rightTalon2->ClearError();

	leftTalon1->ClearIaccum();
	leftTalon2->ClearIaccum();

	rightTalon1->ClearIaccum();
	rightTalon2->ClearIaccum();

	leftTalon1->EnableControl();
	rightTalon1->EnableControl();

	leftTalon2->EnableControl();
	rightTalon2->EnableControl();

}

void DriveTrain::Set_VoltageMode()
{
	leftTalon1->SelectProfileSlot(0);
	rightTalon1->SelectProfileSlot(0);

	leftTalon2->SelectProfileSlot(0);
	rightTalon2->SelectProfileSlot(0);

	leftTalon1->SetControlMode(CANSpeedController::kPercentVbus);
	rightTalon1->SetControlMode(CANSpeedController::kPercentVbus);

	leftTalon2->SetControlMode(CANSpeedController::kPercentVbus);
	rightTalon2->SetControlMode(CANSpeedController::kPercentVbus);

	leftTalon1->EnableControl();
	rightTalon1->EnableControl();

	leftTalon2->EnableControl();
	rightTalon2->EnableControl();

	leftTalon1->Set(0);
	rightTalon1->Set(0);

	leftTalon2->Set(0);
	rightTalon2->Set(0);
}

void DriveTrain::Zero_Encoders()
{
	lZeroPoint = leftTalon1->GetPosition();
	rZeroPoint = rightTalon1->GetPosition();

	lLastPosDelta = 0.0;
	rLastPosDelta = 0.0;
	hasMoved = false;
}

float DriveTrain::Limit(float num)
{
	if (num > 1.0)
	{
		return 1.0;
	}
	if (num < -1.0)
	{
		return -1.0;
	}
	return num;
}


bool DriveTrain::AtCommandedPosition()
{
	//if (!positioning) return true;
/*	double cpos = Master->GetPosition();
	double delta;

	if (cpos > distance)
	{
		delta = cpos - distance;
	} else
	{
		delta = distance - cpos;
	}

	//printf("sd:acp cpos %f distance %f cle %f poserr %d\n",cpos,distance, abs(cpos - distance),posErr);
	if (abs(delta) <= posErr )
	{
		printf("SD:ACP return cpos %f distance %f", cpos, distance);
		return true;
	}*/
	return false;
}
