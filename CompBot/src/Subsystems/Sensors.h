// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef SENSORS_H
#define SENSORS_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../Configurable.h"
#include "IR_Sensor.h"
#include "../IMU.h"


class Sensors: public Subsystem, public Configurable {
private:
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities

	std::shared_ptr<IR_Sensor> IR_Front;
	std::shared_ptr<IR_Sensor> IR_Shooter;
	std::shared_ptr<IR_Sensor> IR_Tower;
	std::shared_ptr<PowerDistributionPanel> _pDp;
	std::shared_ptr<AnalogInput> pressure;
	std::shared_ptr<Encoder>  pivotEnc;
	std::shared_ptr<IMU> imu;


	int    Pivot_Enc_ChannelA;
	int    Pivot_Enc_ChannelB;
	bool   Pivot_Enc_Reversed;
	float  Pivot_PivotOffset;
	float  Pivot_LowOffset;
	bool   Pivot_PosIsUp;


public:

	Sensors();
	virtual ~Sensors();
	virtual void RetrieveConfig();
	virtual void Configure();
	virtual void SaveConfig();
	virtual void CreateConfig();

    void InitDefaultCommand();

    bool RobotHasBall();
    bool IsBallAtShooter();
    void SetFrontIn();
    void SetFrontOut();
    void SetShooterIn();
    void SetShooterOut();
    void StoreCalibration();

    bool TowerInRange();

    float GetAirPressure();

    bool IsPivotAtHome();
    bool IsPivotAtIntake();
    bool IsPivotAtLow();

    std::shared_ptr<IMU> Get_IMU();
};

#endif
