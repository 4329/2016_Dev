// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Sensors.h"
#include "../RobotMap.h"



Sensors::Sensors() : Subsystem("Sensors"), Configurable("Sensors") {

    pivotEnc = RobotMap::pivotEncoder;
    IR_Front.reset( new IR_Sensor(RobotMap::sensorIRdSensorFront, "Front"));
    IR_Shooter.reset( new IR_Sensor(RobotMap::sensorIRdSensor, "Shooter"));
    pressure = RobotMap::pressureSensor;
    _pDp = RobotMap::pDPPowerDistributionPanel;
    imu.reset(new IMU());

	if (!ConfigExists()) CreateConfig();

    RetrieveConfig();
	Configure();
}
    
Sensors::~Sensors()
{

}

void Sensors::RetrieveConfig()
{
	IR_Front->RetrieveConfig();
	IR_Shooter->RetrieveConfig();
	imu->RetrieveConfig();
	Pivot_Enc_ChannelA = Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelA",8);
	Pivot_Enc_ChannelB = Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelB",9);
	Pivot_Enc_Reversed = Preferences::GetInstance()->GetBoolean("Pivot::Enc::Reversed",true);
    Pivot_PivotOffset  = Preferences::GetInstance()->GetFloat("Pivot::PivotOffset",282);
    Pivot_LowOffset    = Preferences::GetInstance()->GetFloat("Pivot::PivotAngleFromHome",351);
	Pivot_PosIsUp      = Preferences::GetInstance()->GetBoolean("Pivot::PosIsUp",false);
}

void Sensors::SaveConfig()
{
	IR_Front->SaveConfig();
	IR_Shooter->SaveConfig();
	imu->SaveConfig();
	Preferences::GetInstance()->PutInt("Pivot::Enc::ChannelA",Pivot_Enc_ChannelA);
	Preferences::GetInstance()->PutInt("Pivot::Enc::ChannelB",Pivot_Enc_ChannelB);
	Preferences::GetInstance()->PutBoolean("Pivot::Enc::Reversed",Pivot_Enc_Reversed);
    Preferences::GetInstance()->PutFloat("Pivot::PivotOffset",Pivot_PivotOffset);
    Preferences::GetInstance()->PutFloat("Pivot::PivotAngleFromHome",Pivot_LowOffset);
	Preferences::GetInstance()->PutBoolean("Pivot::PosIsUp",Pivot_PosIsUp);

}

void Sensors::Configure()
{
	IR_Front->Configure();
	IR_Shooter->Configure();
	imu->Configure();
}

void Sensors::CreateConfig()
{
	IR_Front->CreateConfig();
	IR_Shooter->CreateConfig();
	imu->CreateConfig();
	Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelA",8);
	Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelB",9);
	Preferences::GetInstance()->GetBoolean("Pivot::Enc::Reversed",true);
    Preferences::GetInstance()->GetFloat("Pivot::PivotOffset",282);
    Preferences::GetInstance()->GetFloat("Pivot::PivotAngleFromHome",351);
	Preferences::GetInstance()->GetBoolean("Pivot::PosIsUp",false);
}


void Sensors::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
}


bool Sensors::RobotHasBall()
{
	if (IR_Front->IsInRange())
	{
		return true;
	}
	return false;
}

bool Sensors::IsBallAtShooter()
{
	if (IR_Shooter->IsInRange())
	{
		return true;
	}
	return false;
}

float Sensors::GetAirPressure()
{
	float vout = pressure->GetVoltage();
	return (250.0 *(vout/5.0) - 25.0);
}

bool Sensors::IsPivotAtHome()
{
	return false;
}

bool Sensors::IsPivotAtIntake()
{
	return false;
}

bool Sensors::IsPivotAtLow()
{
	return false;
}

void Sensors::SetFrontIn()
{
	IR_Front->SetIn();
}

void Sensors::SetFrontOut()
{
	IR_Front->SetOut();
}

void Sensors::SetShooterIn()
{
	IR_Shooter->SetIn();
}

void Sensors::SetShooterOut()
{
	IR_Shooter->SetOut();
}

void Sensors::StoreCalibration()
{
	IR_Front->StoreCalibration();
	IR_Shooter->StoreCalibration();
}

std::shared_ptr<IMU> Sensors::Get_IMU()
{
	return imu;
}
