// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Sensors.h"
#include "../RobotMap.h"



Sensors::Sensors() : Subsystem("Sensors"), Configurable("Sensors") {

    pivotEnc = RobotMap::pivotEncoder;
    IR_Sensors.reset( new DresselSensor());
    pressure = RobotMap::pressureSensor;
    _pDp = RobotMap::pDPPowerDistributionPanel;

	if (!ConfigExists()) CreateConfig();

    RetrieveConfig();
	Configure();
}
    
Sensors::~Sensors()
{

}

void Sensors::RetrieveConfig()
{
	IR_Sensors->RetrieveConfig();
	Pivot_Enc_ChannelA = Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelA",8);
	Pivot_Enc_ChannelB = Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelB",9);
	Pivot_Enc_Reversed = Preferences::GetInstance()->GetBoolean("Pivot::Enc::Reversed",true);
    Pivot_PivotOffset  = Preferences::GetInstance()->GetFloat("Pivot::PivotOffset",282);
    Pivot_LowOffset    = Preferences::GetInstance()->GetFloat("Pivot::PivotAngleFromHome",351);
	Pivot_PosIsUp      = Preferences::GetInstance()->GetBoolean("Pivot::PosIsUp",false);
}

void Sensors::SaveConfig()
{
	IR_Sensors->SaveConfig();
	Preferences::GetInstance()->PutInt("Pivot::Enc::ChannelA",Pivot_Enc_ChannelA);
	Preferences::GetInstance()->PutInt("Pivot::Enc::ChannelB",Pivot_Enc_ChannelB);
	Preferences::GetInstance()->PutBoolean("Pivot::Enc::Reversed",Pivot_Enc_Reversed);
    Preferences::GetInstance()->PutFloat("Pivot::PivotOffset",Pivot_PivotOffset);
    Preferences::GetInstance()->PutFloat("Pivot::PivotAngleFromHome",Pivot_LowOffset);
	Preferences::GetInstance()->PutBoolean("Pivot::PosIsUp",Pivot_PosIsUp);

}

void Sensors::Configure()
{
	// Do Nothing.
}

void Sensors::CreateConfig()
{
	Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelA",8);
	Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelB",9);
	Preferences::GetInstance()->GetBoolean("Pivot::Enc::Reversed",true);
    Preferences::GetInstance()->GetFloat("Pivot::PivotOffset",282);
    Preferences::GetInstance()->GetFloat("Pivot::PivotAngleFromHome",351);
	Preferences::GetInstance()->GetBoolean("Pivot::PosIsUp",false);
}


void Sensors::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
}


bool Sensors::RobotHasBall()
{
	if (IR_Sensors->IsInRangeFront())
	{
		return true;
	}
	return false;
}

bool Sensors::IsBallAtShooter()
{
	if (IR_Sensors->IsInRangeShooter())
	{
		return true;
	}
	return false;
}

float Sensors::GetAirPressure()
{
	float vout = pressure->GetVoltage();
	//SmartDashboard::PutNumber("AirPressure", (250.0 *(vout/5.0) - 25.0));
	return (250.0 *(vout/5.0) - 25.0);
}

bool Sensors::IsPivotAtHome()
{
	return false;
}

bool Sensors::IsPivotAtIntake()
{
	return false;
}

bool Sensors::IsPivotAtLow()
{
	return false;
}
