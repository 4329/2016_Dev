// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Intake.h"
#include "../RobotMap.h"


#include "Commands/Pivot_Stick.h"

Intake::Intake() : Subsystem("Intake") , Configurable("Intake") {

    intakeTalon = RobotMap::intakeTalon;
    pivotStage1 = RobotMap::pivotStage1Solenoid;
    pivotStage2 = RobotMap::pivotStage2Solenoid;
    pivotEnc    = RobotMap::pivotEncoder;

    sensors.reset( new DresselSensor());

    if (!ConfigExists()) CreateConfig();

    RetrieveConfig();
	Configure();

}

void Intake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new Pivot_Stick());

}


// Put methods for controlling this subsystem
// here. Call these from Commands.

Intake::~Intake()
{

}

void Intake::RetrieveConfig()
{
	sensors->RetrieveConfig();
	Intake_InSpeed                  = Preferences::GetInstance()->GetFloat("Intake::InSpeed",-1.0);
	Intake_OutSpeed                 = Preferences::GetInstance()->GetFloat("Intake::OutSpeed",1.0);

	Intake_Talon_Enabled            = Preferences::GetInstance()->GetBoolean("Intake::Talon::Enabled",true);
	Intake_Talon_CANID              = Preferences::GetInstance()->GetInt("Intake::Talon::CANID",5);
	Intake_Talon_Reversed           = Preferences::GetInstance()->GetBoolean("Intake::Talon::Reversed",false);
	Intake_Talon_EnableVoltRampRate = Preferences::GetInstance()->GetBoolean("Intake::Talon::EnableVoltRampRate",false);
	Intake_Talon_VoltRampRate       = Preferences::GetInstance()->GetDouble("Intake::Talon::VoltRampRate",5.0);

    Pivot_IntakeOffset              = Preferences::GetInstance()->GetFloat("Pivot::IntakeOffset",282);
    Pivot_LowOffset                 = Preferences::GetInstance()->GetFloat("Pivot::IntakeAngleFromHome",351);
	Pivot_PosIsUp                   = Preferences::GetInstance()->GetBoolean("Pivot::PosIsUp",false);
	Pivot_Lead_Margin               = Preferences::GetInstance()->GetFloat("Pivot::Lead_Margin",10);
	Pivot_PCMID                     = Preferences::GetInstance()->GetInt("Pivot::PCMID",0);
	Pivot_Stage1_Channel            = Preferences::GetInstance()->GetInt("Pivot::Stage1::Channel",5);
	Pivot_Stage1_ActiveIsExtended   = Preferences::GetInstance()->GetBoolean("Pivot::Stage1::ActiveIsExtended",false);
	Pivot_Stage2_Channel            = Preferences::GetInstance()->GetInt("Pivot::Stage2::Channel",6);
	Pivot_Stage2_ActiveIsExtended   = Preferences::GetInstance()->GetBoolean("Pivot::Stage2::ActiveIsExtended",false);

	Pivot_Enc_ChannelA              = Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelA",0);
	Pivot_Enc_ChannelB              = Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelB",1);
	Pivot_Enc_Reversed              = Preferences::GetInstance()->GetBoolean("Pivot::Enc::Reversed",false);
}

void Intake::Configure()
{
	if (Intake_Talon_Enabled)
	{
		printf("I:Configure IT1 enabled\n");
		if(Intake_Talon_EnableVoltRampRate)
		{
			intakeTalon->SetVoltageRampRate(Intake_Talon_VoltRampRate);
		}
	}
}

void Intake::SaveConfig()
{
	sensors->SaveConfig();
	Preferences::GetInstance()->PutFloat("Intake::InSpeed",Intake_InSpeed);
	Preferences::GetInstance()->PutFloat("Intake::OutSpeed",Intake_OutSpeed);

	Preferences::GetInstance()->PutBoolean("Intake::Talon::Enabled",Intake_Talon_Enabled);
	Preferences::GetInstance()->PutInt("Intake::Talon::CANID",Intake_Talon_CANID);
	Preferences::GetInstance()->PutBoolean("Intake::Talon::Reversed",Intake_Talon_Reversed);
	Preferences::GetInstance()->PutBoolean("Intake::Talon::EnableVoltRampRate",Intake_Talon_EnableVoltRampRate);
	Preferences::GetInstance()->PutDouble("Intake::Talon::VoltRampRate",Intake_Talon_VoltRampRate);

    Preferences::GetInstance()->PutFloat("Pivot::IntakeOffset",Pivot_IntakeOffset);
    Preferences::GetInstance()->PutFloat("Pivot::IntakeAngleFromHome",Pivot_LowOffset);
	Preferences::GetInstance()->PutBoolean("Pivot::PosIsUp",Pivot_PosIsUp);
	Preferences::GetInstance()->PutFloat("Pivot::Lead_Margin",Pivot_Lead_Margin);
	Preferences::GetInstance()->PutInt("Pivot::PCMID",Pivot_PCMID);
	Preferences::GetInstance()->PutInt("Pivot::Stage1::Channel",Pivot_Stage1_Channel);
	Preferences::GetInstance()->PutBoolean("Pivot::Stage1::ActiveIsExtended",Pivot_Stage1_ActiveIsExtended);
	Preferences::GetInstance()->PutInt("Pivot::Stage2::Channel",Pivot_Stage2_Channel);
	Preferences::GetInstance()->PutBoolean("Pivot::Stage2::ActiveIsExtended",Pivot_Stage2_ActiveIsExtended);

	Preferences::GetInstance()->PutInt("Pivot::Enc::ChannelA",Pivot_Enc_ChannelA);
	Preferences::GetInstance()->PutInt("Pivot::Enc::ChannelB",Pivot_Enc_ChannelB);
	Preferences::GetInstance()->PutBoolean("Pivot::Enc::Reversed",Pivot_Enc_Reversed);
}

void Intake::CreateConfig()
{
	Preferences::GetInstance()->GetFloat("Intake::InSpeed",-1.0);
	Preferences::GetInstance()->GetFloat("Intake::OutSpeed",1.0);

	Preferences::GetInstance()->GetBoolean("Intake::Talon::Enabled",true);
	Preferences::GetInstance()->GetInt("Intake::Talon::CANID",5);
	Preferences::GetInstance()->GetBoolean("Intake::Talon::Reversed",false);
	Preferences::GetInstance()->GetBoolean("Intake::Talon::EnableVoltRampRate",false);
	Preferences::GetInstance()->GetDouble("Intake::Talon::VoltRampRate",5.0);

    Preferences::GetInstance()->GetFloat("Pivot::IntakeOffset",282);
    Preferences::GetInstance()->GetFloat("Pivot::IntakeAngleFromHome",351);
	Preferences::GetInstance()->GetBoolean("Pivot::PosIsUp",false);
	Preferences::GetInstance()->GetFloat("Pivot::Lead_Margin",10);
	Preferences::GetInstance()->GetInt("Pivot::PCMID",0);
	Preferences::GetInstance()->GetInt("Pivot::Stage1::Channel",5);
	Preferences::GetInstance()->GetBoolean("Pivot::Stage1::ActiveIsExtended",false);
	Preferences::GetInstance()->GetInt("Pivot::Stage2::Channel",6);
	Preferences::GetInstance()->GetBoolean("Pivot::Stage2::ActiveIsExtended",false);

	Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelA",0);
	Preferences::GetInstance()->GetInt("Pivot::Enc::ChannelB",1);
	Preferences::GetInstance()->GetBoolean("Pivot::Enc::Reversed",false);

}

void Intake::SetIntake(bool in, float percent_speed)
{
	if (in)
	{
		intakeTalon->Set(Intake_InSpeed * percent_speed);
	} else
	{
		intakeTalon->Set(Intake_OutSpeed * percent_speed);
	}
}

void Intake::StopIntake()
{
	intakeTalon->Set(0);
}

void Intake::SetPivotHome()
{
	pivotEnc->Reset();
    printf("Setting Pivot Home to %d\n",pivotEnc->Get());
}

void Intake::SetPivotToHome()
{
	Robot::brake->Release();
	printf("Moving Pivot to Home Position\n");
	pivotStage1->Set(!Pivot_Stage1_ActiveIsExtended);
    pivotStage2->Set(!Pivot_Stage2_ActiveIsExtended);
}

bool Intake::IsPivotAtHome()
{
	if (!(Pivot_Stage1_ActiveIsExtended == pivotStage1->Get()) && !(Pivot_Stage2_ActiveIsExtended && pivotStage2->Get()) )
	{
	    return true;
	}
	return false;
}

void Intake::SetPivotIntake()
{
	Robot::brake->Release();
	printf("Setting Pivot to intake\n");
	pivotStage1->Set(Pivot_Stage1_ActiveIsExtended);
}

bool Intake::IsPivotAtIntake()
{
	if ( (Pivot_Stage1_ActiveIsExtended == pivotStage1->Get()) && !(Pivot_Stage2_ActiveIsExtended && pivotStage2->Get()) )
	{
	    return true;
	}
	return false;
}


void Intake::SetPivotLow()
{
	Robot::brake->Release();
	printf("Setting Pivot to Low\n");
	pivotStage1->Set(Pivot_Stage1_ActiveIsExtended);
	pivotStage2->Set(Pivot_Stage2_ActiveIsExtended);
}

bool Intake::IsPivotAtLow()
{
	if ( (Pivot_Stage1_ActiveIsExtended == pivotStage1->Get()) && (Pivot_Stage2_ActiveIsExtended && pivotStage2->Get()) )
	{
	    return true;
	}
	return false;
}

void Intake::UpPivot()
{
	if (IsPivotAtLow())
	{
		SetPivotIntake();
	} else
	{
		SetPivotToHome();
	}
}
void Intake::DownPivot()
{
	if (IsPivotAtHome())
	{
		SetPivotIntake();
	} else
	{
		SetPivotLow();
	}
}

void Intake::SetPivot(float value)
{
  // Do nothing right now.
}

float Intake::Limit(float num)
{
	if (num > 0.50)
	{
		return 0.50;
	}
	if (num < -0.50)
	{
		return -0.50;
	}
	return num;
}

bool Intake::RobotHasBall()
{
	if (sensors->IsInRangeFront())
	{
		return true;
	}
	return false;
}

bool Intake::IsBallAtShooter()
{
	if (sensors->IsInRangeShooter())
	{
		return true;
	}
	return false;
}

void Intake::ExtendPivotStage1()
{
	pivotStage1->Set(Pivot_Stage1_ActiveIsExtended);
}

void Intake::ExtendPivotStage2()
{
	pivotStage2->Set(Pivot_Stage2_ActiveIsExtended);
}

void Intake::RetractPivotStage1()
{
	pivotStage1->Set(!Pivot_Stage1_ActiveIsExtended);
}

void Intake::RetractPivotStage2()
{
	pivotStage2->Set(!Pivot_Stage2_ActiveIsExtended);
}

bool Intake::IsPivotStage1Extended()
{
	bool retval = pivotStage1->Get();

	if ((Pivot_Stage1_ActiveIsExtended && retval) || (!Pivot_Stage1_ActiveIsExtended && !retval))
	{
		return true;
	}
	return false;
}

bool Intake::IsPivotStage2Extended()
{
	bool retval = pivotStage2->Get();

	if ((Pivot_Stage2_ActiveIsExtended && retval) || (!Pivot_Stage2_ActiveIsExtended && !retval))
	{
		return true;
	}
	return false;
}
