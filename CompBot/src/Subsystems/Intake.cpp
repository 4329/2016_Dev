// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Intake.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Intake_Config.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Intake::Intake() : Subsystem("Intake") , Configurable("Intake") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    intakeTalon1 = RobotMap::intakeIntakeTalon1;
    pivotTalon = RobotMap::intakePivotTalon;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    myConfig = new Intake_Config();

	if (!ConfigExists()) CreateConfig();

    RetrieveConfig();
	Configure();

}

void Intake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

Intake::~Intake()
{
    delete myConfig;
}

void Intake::RetrieveConfig()
{
	myConfig->Intake_InSpeed = Preferences::GetInstance()->GetFloat("Intake::InSpeed",1.0);
	myConfig->Intake_OutSpeed = Preferences::GetInstance()->GetFloat("Intake::OutSpeed",-0.75);
	myConfig->Intake_QuadEncoder_PulsesPerDegree = Preferences::GetInstance()->GetFloat("Intake::QuadEncoder::PulsesPerDegree");

	myConfig->Intake_intakeTalon1_Enabled = Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Enabled",true);
	myConfig->Intake_intakeTalon1_CANID = Preferences::GetInstance()->GetInt("Intake::intakeTalon1::CANID",5);
	myConfig->Intake_intakeTalon1_Reversed = Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Reversed",false);
	myConfig->Intake_intakeTalon1_HasSensor = Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::HasSensor",false);
	myConfig->Intake_intakeTalon1_SensorReversed = Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::SensorReversed",false);
	myConfig->Intake_intakeTalon1_EnablePID = Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::EnablePID",false);
	myConfig->Intake_intakeTalon1_Profile_0_PID_P = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::PID::P",1.0);
	myConfig->Intake_intakeTalon1_Profile_0_PID_I = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::PID::I",0.01);
	myConfig->Intake_intakeTalon1_Profile_0_PID_D = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::PID::D",0.0);
	myConfig->Intake_intakeTalon1_Profile_0_PID_F = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::PID::F",0.01);
	myConfig->Intake_intakeTalon1_Profile_0_IZone = Preferences::GetInstance()->GetInt("Intake::intakeTalon1::Profile::0::IZone",256);
	myConfig->Intake_intakeTalon1_Profile_0_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Profile::0::EnableCLRampRate",false);
	myConfig->Intake_intakeTalon1_Profile_0_CLRampRate = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::CLRampRate",2500);
	myConfig->Intake_intakeTalon1_Profile_1_PID_P = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::PID::P",1.0);
	myConfig->Intake_intakeTalon1_Profile_1_PID_I = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::PID::I",0.01);
	myConfig->Intake_intakeTalon1_Profile_1_PID_D = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::PID::D",0);
	myConfig->Intake_intakeTalon1_Profile_1_PID_F = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::PID::F",0.01);
	myConfig->Intake_intakeTalon1_Profile_1_IZone = Preferences::GetInstance()->GetInt("Intake::intakeTalon1::Profile::1::IZone",256);
	myConfig->Intake_intakeTalon1_Profile_1_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Profile::1::EnableCLRampRate",false);
	myConfig->Intake_intakeTalon1_Profile_1_CLRampRate = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::CLRampRate",2500);
	myConfig->Intake_intakeTalon1_EnableVoltRampRate = Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::EnableVoltRampRate",false);
	myConfig->Intake_intakeTalon1_VoltRampRate = Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::VoltRampRate",5.0);
	myConfig->Intake_intakeTalon1_PID_CL_PM_Error = Preferences::GetInstance()->GetInt("Intake::intakeTalon1::PID::CL::PM::Error",10);
	myConfig->Intake_intakeTalon1_QuadEncoder_PulsesPerInch = Preferences::GetInstance()->GetFloat("Intake::intakeTalon1::QuadEncoder::PulsesPerInch",200.584198);
    myConfig->Intake_intakeTalon1_Slaved = Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Slaved",false);
    myConfig->Intake_intakeTalon1_MasterCANID = Preferences::GetInstance()->GetInt("Intake::intakeTalon1::MasterCANID",0);

    myConfig->Intake_UpAngleFromHome = Preferences::GetInstance()->GetFloat("Intake::UpAngleFromHome",560);
    myConfig->Intake_IntakeAngleFromHome = Preferences::GetInstance()->GetFloat("Intake::IntakeAngleFromHome",200);
	myConfig->Intake_pivotTalon_Enabled = Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Enabled",true);
	myConfig->Intake_pivotTalon_CANID = Preferences::GetInstance()->GetInt("Intake::pivotTalon::CANID",6);
	myConfig->Intake_pivotTalon_Reversed = Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Reversed",false);
	myConfig->Intake_pivotTalon_HasSensor = Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::HasSensor",false);
	myConfig->Intake_pivotTalon_SensorReversed = Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::SensorReversed",false);
	myConfig->Intake_pivotTalon_EnablePID = Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::EnablePID",false);
	myConfig->Intake_pivotTalon_Profile_0_PID_P = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::PID::P",1.0);
	myConfig->Intake_pivotTalon_Profile_0_PID_I = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::PID::I",0.01);
	myConfig->Intake_pivotTalon_Profile_0_PID_D = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::PID::D",0.0);
	myConfig->Intake_pivotTalon_Profile_0_PID_F = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::PID::F",0.01);
	myConfig->Intake_pivotTalon_Profile_0_IZone = Preferences::GetInstance()->GetInt("Intake::pivotTalon::Profile::0::IZone",256);
	myConfig->Intake_pivotTalon_Profile_0_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Profile::0::EnableCLRampRate",false);
	myConfig->Intake_pivotTalon_Profile_0_CLRampRate = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::CLRampRate",2500);
	myConfig->Intake_pivotTalon_Profile_1_PID_P = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::PID::P",1.0);
	myConfig->Intake_pivotTalon_Profile_1_PID_I = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::PID::I",0.01);
	myConfig->Intake_pivotTalon_Profile_1_PID_D = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::PID::D",0);
	myConfig->Intake_pivotTalon_Profile_1_PID_F = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::PID::F",0.01);
	myConfig->Intake_pivotTalon_Profile_1_IZone = Preferences::GetInstance()->GetInt("Intake::pivotTalon::Profile::1::IZone",256);
	myConfig->Intake_pivotTalon_Profile_1_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Profile::1::EnableCLRampRate",false);
	myConfig->Intake_pivotTalon_Profile_1_CLRampRate = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::CLRampRate",2500);
	myConfig->Intake_pivotTalon_EnableVoltRampRate = Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::EnableVoltRampRate",false);
	myConfig->Intake_pivotTalon_VoltRampRate = Preferences::GetInstance()->GetDouble("Intake::pivotTalon::VoltRampRate",5.0);
	myConfig->Intake_pivotTalon_PID_CL_PM_Error = Preferences::GetInstance()->GetInt("Intake::pivotTalon::PID::CL::PM::Error",10);
	myConfig->Intake_pivotTalon_QuadEncoder_PulsesPerInch = Preferences::GetInstance()->GetFloat("Intake::pivotTalon::QuadEncoder::PulsesPerInch",200.584198);
    myConfig->Intake_pivotTalon_Slaved = Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Slaved",false);
    myConfig->Intake_pivotTalon_MasterCANID = Preferences::GetInstance()->GetInt("Intake::pivotTalon::MasterCANID",0);
}

void Intake::Configure()
{

}

void Intake::SaveConfig()
{
	Preferences::GetInstance()->PutFloat("Intake::InSpeed",myConfig->Intake_InSpeed);
	Preferences::GetInstance()->PutFloat("Intake::OutSpeed",myConfig->Intake_OutSpeed);
	Preferences::GetInstance()->PutFloat("Intake::QuadEncoder::PulsesPerDegree",myConfig->Intake_QuadEncoder_PulsesPerDegree);

	Preferences::GetInstance()->PutBoolean("Intake::intakeTalon1::Enabled",myConfig->Intake_intakeTalon1_Enabled);
	Preferences::GetInstance()->PutInt("Intake::intakeTalon1::CANID",myConfig->Intake_intakeTalon1_CANID);
	Preferences::GetInstance()->PutBoolean("Intake::intakeTalon1::Reversed",myConfig->Intake_intakeTalon1_Reversed);
	Preferences::GetInstance()->PutBoolean("Intake::intakeTalon1::HasSensor",myConfig->Intake_intakeTalon1_HasSensor);
	Preferences::GetInstance()->PutBoolean("Intake::intakeTalon1::SensorReversed",myConfig->Intake_intakeTalon1_SensorReversed);
	Preferences::GetInstance()->PutBoolean("Intake::intakeTalon1::EnablePID",myConfig->Intake_intakeTalon1_EnablePID);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::0::PID::P",myConfig->Intake_intakeTalon1_Profile_0_PID_P);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::0::PID::I",myConfig->Intake_intakeTalon1_Profile_0_PID_I);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::0::PID::D",myConfig->Intake_intakeTalon1_Profile_0_PID_D);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::0::PID::F",myConfig->Intake_intakeTalon1_Profile_0_PID_F);
	Preferences::GetInstance()->PutInt("Intake::intakeTalon1::Profile::0::IZone",myConfig->Intake_intakeTalon1_Profile_0_IZone);
	Preferences::GetInstance()->PutBoolean("Intake::intakeTalon1::Profile::0::EnableCLRampRate",myConfig->Intake_intakeTalon1_Profile_0_EnableCLRampRate);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::0::CLRampRate",myConfig->Intake_intakeTalon1_Profile_0_CLRampRate);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::1::PID::P",myConfig->Intake_intakeTalon1_Profile_1_PID_P);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::1::PID::I",myConfig->Intake_intakeTalon1_Profile_1_PID_I);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::1::PID::D",myConfig->Intake_intakeTalon1_Profile_1_PID_D);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::1::PID::F",myConfig->Intake_intakeTalon1_Profile_1_PID_F);
	Preferences::GetInstance()->PutInt("Intake::intakeTalon1::Profile::1::IZone",myConfig->Intake_intakeTalon1_Profile_1_IZone);
	Preferences::GetInstance()->PutBoolean("Intake::intakeTalon1::Profile::1::EnableCLRampRate",myConfig->Intake_intakeTalon1_Profile_1_EnableCLRampRate);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::Profile::1::CLRampRate",myConfig->Intake_intakeTalon1_Profile_1_CLRampRate);
	Preferences::GetInstance()->PutBoolean("Intake::intakeTalon1::EnableVoltRampRate",myConfig->Intake_intakeTalon1_EnableVoltRampRate);
	Preferences::GetInstance()->PutDouble("Intake::intakeTalon1::VoltRampRate",myConfig->Intake_intakeTalon1_VoltRampRate);
	Preferences::GetInstance()->PutInt("Intake::intakeTalon1::PID::CL::PM::Error",myConfig->Intake_intakeTalon1_PID_CL_PM_Error);
	Preferences::GetInstance()->PutFloat("Intake::intakeTalon1::QuadEncoder::PulsesPerInch",myConfig->Intake_intakeTalon1_QuadEncoder_PulsesPerInch);
    Preferences::GetInstance()->PutBoolean("Intake::intakeTalon1::Slaved",myConfig->Intake_intakeTalon1_Slaved);
    Preferences::GetInstance()->PutInt("Intake::intakeTalon1::MasterCANID",myConfig->Intake_intakeTalon1_MasterCANID);


    Preferences::GetInstance()->PutFloat("Intake::UpAngleFromHome",myConfig->Intake_UpAngleFromHome);
    Preferences::GetInstance()->PutFloat("Intake::IntakeAngleFromeHome",myConfig->Intake_IntakeAngleFromHome);
	Preferences::GetInstance()->PutBoolean("Intake::pivotTalon::Enabled",myConfig->Intake_pivotTalon_Enabled);
	Preferences::GetInstance()->PutInt("Intake::pivotTalon::CANID",myConfig->Intake_pivotTalon_CANID);
	Preferences::GetInstance()->PutBoolean("Intake::pivotTalon::Reversed",myConfig->Intake_pivotTalon_Reversed);
	Preferences::GetInstance()->PutBoolean("Intake::pivotTalon::HasSensor",myConfig->Intake_pivotTalon_HasSensor);
	Preferences::GetInstance()->PutBoolean("Intake::pivotTalon::SensorReversed",myConfig->Intake_pivotTalon_SensorReversed);
	Preferences::GetInstance()->PutBoolean("Intake::pivotTalon::EnablePID",myConfig->Intake_pivotTalon_EnablePID);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::0::PID::P",myConfig->Intake_pivotTalon_Profile_0_PID_P);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::0::PID::I",myConfig->Intake_pivotTalon_Profile_0_PID_I);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::0::PID::D",myConfig->Intake_pivotTalon_Profile_0_PID_D);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::0::PID::F",myConfig->Intake_pivotTalon_Profile_0_PID_F);
	Preferences::GetInstance()->PutInt("Intake::pivotTalon::Profile::0::IZone",myConfig->Intake_pivotTalon_Profile_0_IZone);
	Preferences::GetInstance()->PutBoolean("Intake::pivotTalon::Profile::0::EnableCLRampRate",myConfig->Intake_pivotTalon_Profile_0_EnableCLRampRate);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::0::CLRampRate",myConfig->Intake_pivotTalon_Profile_0_CLRampRate);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::1::PID::P",myConfig->Intake_pivotTalon_Profile_1_PID_P);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::1::PID::I",myConfig->Intake_pivotTalon_Profile_1_PID_I);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::1::PID::D",myConfig->Intake_pivotTalon_Profile_1_PID_D);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::1::PID::F",myConfig->Intake_pivotTalon_Profile_1_PID_F);
	Preferences::GetInstance()->PutInt("Intake::pivotTalon::Profile::1::IZone",myConfig->Intake_pivotTalon_Profile_1_IZone);
	Preferences::GetInstance()->PutBoolean("Intake::pivotTalon::Profile::1::EnableCLRampRate",myConfig->Intake_pivotTalon_Profile_1_EnableCLRampRate);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::Profile::1::CLRampRate",myConfig->Intake_pivotTalon_Profile_1_CLRampRate);
	Preferences::GetInstance()->PutBoolean("Intake::pivotTalon::EnableVoltRampRate",myConfig->Intake_pivotTalon_EnableVoltRampRate);
	Preferences::GetInstance()->PutDouble("Intake::pivotTalon::VoltRampRate",myConfig->Intake_pivotTalon_VoltRampRate);
	Preferences::GetInstance()->PutInt("Intake::pivotTalon::PID::CL::PM::Error",myConfig->Intake_pivotTalon_PID_CL_PM_Error);
	Preferences::GetInstance()->PutFloat("Intake::pivotTalon::QuadEncoder::PulsesPerInch",myConfig->Intake_pivotTalon_QuadEncoder_PulsesPerInch);
    Preferences::GetInstance()->PutBoolean("Intake::pivotTalon::Slaved",myConfig->Intake_pivotTalon_Slaved);
    Preferences::GetInstance()->PutInt("Intake::pivotTalon::MasterCANID",myConfig->Intake_pivotTalon_MasterCANID);
}

void Intake::CreateConfig()
{
    Preferences::GetInstance()->GetFloat("Intake::InSpeed",1.0);
	Preferences::GetInstance()->GetFloat("Intake::OutSpeed",-0.75);
	Preferences::GetInstance()->GetFloat("Intake::QuadEncoder::PulsesPerDegree");

	Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Enabled",true);
	Preferences::GetInstance()->GetInt("Intake::intakeTalon1::CANID",5);
	Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Reversed",false);
	Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::HasSensor",false);
	Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::SensorReversed",false);
	Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::EnablePID",false);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::PID::P",1.0);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::PID::I",0.01);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::PID::D",0.0);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::PID::F",0.01);
	Preferences::GetInstance()->GetInt("Intake::intakeTalon1::Profile::0::IZone",256);
	Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Profile::0::EnableCLRampRate",false);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::0::CLRampRate",2500);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::PID::P",1.0);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::PID::I",0.01);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::PID::D",0);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::PID::F",0.01);
	Preferences::GetInstance()->GetInt("Intake::intakeTalon1::Profile::1::IZone",256);
	Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Profile::1::EnableCLRampRate",false);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::Profile::1::CLRampRate",2500);
	Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::EnableVoltRampRate",false);
	Preferences::GetInstance()->GetDouble("Intake::intakeTalon1::VoltRampRate",5.0);
	Preferences::GetInstance()->GetInt("Intake::intakeTalon1::PID::CL::PM::Error",10);
	Preferences::GetInstance()->GetFloat("Intake::intakeTalon1::QuadEncoder::PulsesPerInch",200.584198);
    Preferences::GetInstance()->GetBoolean("Intake::intakeTalon1::Slaved",false);
    Preferences::GetInstance()->GetInt("Intake::intakeTalon1::MasterCANID",0);



    Preferences::GetInstance()->GetFloat("Intake::UpAngleFromHome",560);
    Preferences::GetInstance()->GetFloat("Intake::IntakeAngleFromHome",200);
	Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Enabled",true);
	Preferences::GetInstance()->GetInt("Intake::pivotTalon::CANID",6);
	Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Reversed",false);
	Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::HasSensor",false);
	Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::SensorReversed",false);
	Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::EnablePID",false);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::PID::P",1.0);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::PID::I",0.01);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::PID::D",0.0);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::PID::F",0.01);
	Preferences::GetInstance()->GetInt("Intake::pivotTalon::Profile::0::IZone",256);
	Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Profile::0::EnableCLRampRate",false);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::0::CLRampRate",2500);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::PID::P",1.0);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::PID::I",0.01);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::PID::D",0);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::PID::F",0.01);
	Preferences::GetInstance()->GetInt("Intake::pivotTalon::Profile::1::IZone",256);
	Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Profile::1::EnableCLRampRate",false);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::Profile::1::CLRampRate",2500);
	Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::EnableVoltRampRate",false);
	Preferences::GetInstance()->GetDouble("Intake::pivotTalon::VoltRampRate",5.0);
	Preferences::GetInstance()->GetInt("Intake::pivotTalon::PID::CL::PM::Error",10);
	Preferences::GetInstance()->GetFloat("Intake::pivotTalon::QuadEncoder::PulsesPerInch",200.584198);
    Preferences::GetInstance()->GetBoolean("Intake::pivotTalon::Slaved",false);
    Preferences::GetInstance()->GetInt("Intake::pivotTalon::MasterCANID",0);

}
