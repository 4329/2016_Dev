// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef INTAKE_H
#define INTAKE_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../Configurable.h"
#include "DresselSensor.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Intake: public Subsystem , public Configurable {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities

	std::shared_ptr<CANTalon> intakeTalon;
	std::shared_ptr<Solenoid> pivotStage1;
	std::shared_ptr<Solenoid> pivotStage2;

	std::shared_ptr<Encoder>  pivotEnc;

	float  Intake_InSpeed;
	float  Intake_OutSpeed;
	bool   Intake_Talon_Enabled;
	int    Intake_Talon_CANID;
	bool   Intake_Talon_Reversed;
	bool   Intake_Talon_EnableVoltRampRate;
	double Intake_Talon_VoltRampRate;

	float  Pivot_IntakeOffset;
	float  Pivot_LowOffset;
	bool   Pivot_PosIsUp;
	float  Pivot_Lead_Margin;
	int    Pivot_PCMID;
	int    Pivot_Stage1_Channel;
	bool   Pivot_Stage1_ActiveIsExtended;
	int    Pivot_Stage2_Channel;
	bool   Pivot_Stage2_ActiveIsExtended;

	int    Pivot_Enc_ChannelA;
	int    Pivot_Enc_ChannelB;
	bool   Pivot_Enc_Reversed;


public:
	Intake();
	virtual ~Intake();
	void InitDefaultCommand();

	virtual void RetrieveConfig();
	virtual void Configure();
	virtual void SaveConfig();
	virtual void CreateConfig();

	void SetIntake(bool in, float percent_speed = 1.0);
	void StopIntake();

	void SetPivotHome();
	void SetPivotToHome();
	bool IsPivotAtHome();
	void SetPivotIntake();
	bool IsPivotAtIntake();
	void SetPivotLow();
	bool IsPivotAtLow();

	void UpPivot();
	void DownPivot();

	void SetPivot(float value);
    float Limit(float num);

    bool RobotHasBall();
    bool IsBallAtShooter();

    void ExtendPivotStage1();
    void ExtendPivotStage2();
    void RetractPivotStage1();
    void RetractPivotStage2();

    bool IsPivotStage1Extended();
    bool IsPivotStage2Extended();

    std::shared_ptr<DresselSensor> sensors;
};

#endif
