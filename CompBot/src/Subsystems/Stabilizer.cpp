// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Stabilizer.h"
#include "../RobotMap.h"



Stabilizer::Stabilizer() : Subsystem("Stabilizer"), Configurable("Stabilizer") {

	StabilizerSolenoid = RobotMap::stabilizerSolenoid;
	ForwardIsDeployed = true;

	if (!ConfigExists()) CreateConfig();

    RetrieveConfig();
	Configure();
}
    
Stabilizer::~Stabilizer()
{

}

void Stabilizer::RetrieveConfig()
{
	PCMID = Preferences::GetInstance()->GetInt("Stabilizer::PCMID",0);
	FwdChannel = Preferences::GetInstance()->GetInt("Stabilizer::ForwardChannel",2);
	RevChannel = Preferences::GetInstance()->GetInt("Stabilizer::ReverseChannel",3);
	ForwardIsDeployed = Preferences::GetInstance()->GetBoolean("Stabilizer::ForwardIsDeployed",false);
}

void Stabilizer::SaveConfig()
{
	Preferences::GetInstance()->PutInt("Stabilizer::PCMID",PCMID);
	Preferences::GetInstance()->PutInt("Stabilizer::ForwardChannel",FwdChannel);
	Preferences::GetInstance()->PutInt("Stabilizer::ReverseChannel",RevChannel);
	Preferences::GetInstance()->PutBoolean("Stabilizer::ForwardIsDeployed",ForwardIsDeployed);
}

void Stabilizer::Configure()
{
	// Do Nothing.
}

void Stabilizer::CreateConfig()
{
	Preferences::GetInstance()->PutInt("Stabilizer::PCMID",0);
	Preferences::GetInstance()->PutInt("Stabilizer::ForwardChannel",2);
	Preferences::GetInstance()->PutInt("Stabilizer::ReverseChannel",3);
	Preferences::GetInstance()->PutBoolean("Stabilizer::ForwardIsDeployed",false);
}


void Stabilizer::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());

}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Stabilizer::Deploy()
{
	if (ForwardIsDeployed)
	{
		StabilizerSolenoid->Set(DoubleSolenoid::kForward);
	} else
	{
		StabilizerSolenoid->Set(DoubleSolenoid::kReverse);
	}
}

void Stabilizer::Retract()
{
	if (ForwardIsDeployed)
	{
		StabilizerSolenoid->Set(DoubleSolenoid::kReverse);
	} else
	{
		StabilizerSolenoid->Set(DoubleSolenoid::kForward);
	}
}

bool Stabilizer::IsDeployed()
{
	if (ForwardIsDeployed)
	{
		if (StabilizerSolenoid->Get() == DoubleSolenoid::kForward) return true;
		return false;
	} else
	{
		if (StabilizerSolenoid->Get() == DoubleSolenoid::kReverse) return true;
		return false;
	}
	return false;
}
