// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Scaler.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Scaler::Scaler() : Subsystem("Scaler"), Configurable("Scalar") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	_scaler= RobotMap::scalerSolenoid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	CheckConfig("PCMID");
	Configure();
}

void Scaler::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

Scaler::~Scaler()
{

}


void Scaler::RetrieveConfig()
{
	PCMID = Preferences::GetInstance()->GetInt("Scalar::PCMID",0);
	Channel = Preferences::GetInstance()->GetInt("Scalar::Channel",0);
	ActiveIsExtended = Preferences::GetInstance()->GetBoolean("Scalar::ActiveIsExtended",true);
}

void Scaler::Configure()
{

}

void Scaler::SaveConfig()
{
	Preferences::GetInstance()->PutInt("Scalar::PCMID",PCMID);
	Preferences::GetInstance()->PutInt("Scalar::Channel",Channel);
	Preferences::GetInstance()->PutBoolean("Scalar::ActiveIsExtended",ActiveIsExtended);
}

void Scaler::LiveConfigure()
{
	RetrieveConfig();
	Configure();
}

void Scaler::Extend()
{
	_scaler->Set(ActiveIsExtended);
}

void Scaler::Retract()
{
	_scaler->Set(!ActiveIsExtended);
}

bool Scaler::IsExtended()
{
	bool retval = _scaler->Get();

	if ((ActiveIsExtended && retval) || (!ActiveIsExtended && !retval))
	{
		return true;
	}
	return false;
}
