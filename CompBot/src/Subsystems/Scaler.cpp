// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Scaler.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Scaler::Scaler() : Subsystem("Scaler"), Configurable("Scalar") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	scalerStage1 = RobotMap::scalerStage1Solenoid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	scalerStage2 = RobotMap::scalerStage2Solenoid;

	CheckConfig("PCMID");
	Configure();
}

void Scaler::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

Scaler::~Scaler()
{

}


void Scaler::RetrieveConfig()
{
	PCMID = Preferences::GetInstance()->GetInt("Scalar::PCMID",0);
	scalarStage1Channel = Preferences::GetInstance()->GetInt("Scalar::Stage1::Channel",0);
	scalarStage2Channel = Preferences::GetInstance()->GetInt("Scalar::Stage2::Channel",1);
	stage1ActiveIsExtended = Preferences::GetInstance()->GetBoolean("Scalar::Stage1::ActiveIsExtended",true);
	stage2ActiveIsExtended = Preferences::GetInstance()->GetBoolean("Scalar::Stage2::ActiveIsExtended",true);
}

void Scaler::Configure()
{

}

void Scaler::SaveConfig()
{
	Preferences::GetInstance()->PutInt("Scalar::PCMID",PCMID);
	Preferences::GetInstance()->PutInt("Scalar::Stage1::Channel",scalarStage1Channel);
	Preferences::GetInstance()->PutInt("Scalar::Stage2::Channel",scalarStage2Channel);
	Preferences::GetInstance()->PutBoolean("Scalar::Stage1::ActiveIsExtended",stage1ActiveIsExtended);
	Preferences::GetInstance()->PutBoolean("Scalar::Stage2::ActiveIsExtended",stage2ActiveIsExtended);
}

void Scaler::LiveConfigure()
{
	RetrieveConfig();
	Configure();
}

void Scaler::Stage1Extend()
{
	scalerStage1->Set(stage1ActiveIsExtended);
}

void Scaler::Stage1Retract()
{
	scalerStage1->Set(!stage1ActiveIsExtended);
}

void Scaler::Stage2Extend()
{
	scalerStage2->Set(stage2ActiveIsExtended);
}

void Scaler::Stage2Retract()
{
	scalerStage2->Set(!stage2ActiveIsExtended);
}

bool Scaler::IsStage1Extended()
{
	bool retval = scalerStage1->Get();

	if ((stage1ActiveIsExtended && retval) || (!stage1ActiveIsExtended && !retval))
	{
		return true;
	}
	return false;
}


bool Scaler::IsStage2Extended()
{
	bool retval = scalerStage2->Get();

	if ((stage2ActiveIsExtended && retval) || (!stage2ActiveIsExtended && !retval))
	{
		return true;
	}
	return false;
}
