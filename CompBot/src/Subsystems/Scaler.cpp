// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Scaler.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Scaler::Scaler() : Subsystem("Scaler"), Configurable("Scalar") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    scalerDblSolenoid = RobotMap::scalerScalerDblSolenoid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    scalerLiftDblSolenoid = RobotMap::scalerLiftDblSolenoid;

	if (!ConfigExists()) CreateConfig();

    RetrieveConfig();
	Configure();
}

void Scaler::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

Scaler::~Scaler()
{

}


void Scaler::RetrieveConfig()
{
	PCMID = Preferences::GetInstance()->GetInt("Scalar::PCMID",0);
	scalarFwdChannel = Preferences::GetInstance()->GetInt("Scalar::Scalar::FwdChannel",0);
	scalarRevChannel = Preferences::GetInstance()->GetInt("Scalar::Scalar::RevChannel",1);
	scalarFwdIsExtended = Preferences::GetInstance()->GetBoolean("Scalar::Scalar::FwdIsExtended",true);
	liftFwdChannel = Preferences::GetInstance()->GetInt("Scalar::Lift::FwdChannel",2);
	liftRevChannel = Preferences::GetInstance()->GetInt("Scalar::Lift::RevChannel",3);
	liftFwdIsExtened = Preferences::GetInstance()->GetBoolean("Scalar::Lift::FwdIsExtened",true);
}

void Scaler::Configure()
{

}

void Scaler::SaveConfig()
{
	Preferences::GetInstance()->PutInt("Scalar::PCMID",PCMID);
	Preferences::GetInstance()->PutInt("Scalar::Scalar::FwdChannel",scalarFwdChannel);
	Preferences::GetInstance()->PutInt("Scalar::Scalar::RevChannel",scalarRevChannel);
	Preferences::GetInstance()->PutBoolean("Scalar::Scalar::FwdIsExtended",scalarFwdIsExtended);
	Preferences::GetInstance()->PutInt("Scalar::Lift::FwdChannel",liftFwdChannel);
	Preferences::GetInstance()->PutInt("Scalar::Lift::RevChannel",liftRevChannel);
	Preferences::GetInstance()->PutBoolean("Scalar::Lift::FwdIsExtened",liftFwdIsExtened);
}

void Scaler::CreateConfig()
{
	Preferences::GetInstance()->PutInt("Scalar::PCMID",0);
	Preferences::GetInstance()->PutInt("Scalar::Scalar::FwdChannel",0);
	Preferences::GetInstance()->PutInt("Scalar::Scalar::RevChannel",1);
	Preferences::GetInstance()->PutBoolean("Scalar::Scalar::FwdIsExtended",true);
	Preferences::GetInstance()->PutInt("Scalar::Lift::FwdChannel",2);
	Preferences::GetInstance()->PutInt("Scalar::Lift::RevChannel",3);
	Preferences::GetInstance()->PutBoolean("Scalar::Lift::FwdIsExtened",true);
}

void Scaler::LiftRaise()
{
	if (liftFwdIsExtened)
	{
		scalerLiftDblSolenoid->Set(DoubleSolenoid::kForward);
	} else
	{
		scalerLiftDblSolenoid->Set(DoubleSolenoid::kReverse);
	}
}

void Scaler::LiftLower()
{
	if (liftFwdIsExtened)
	{
		scalerLiftDblSolenoid->Set(DoubleSolenoid::kReverse);
	} else
	{
		scalerLiftDblSolenoid->Set(DoubleSolenoid::kForward);
	}
}

void Scaler::Extend()
{
	if (scalarFwdIsExtended)
	{
		scalerDblSolenoid->Set(DoubleSolenoid::kForward);
	} else
	{
		scalerDblSolenoid->Set(DoubleSolenoid::kReverse);
	}
}

void Scaler::Retract()
{
	if (scalarFwdIsExtended)
	{
		scalerDblSolenoid->Set(DoubleSolenoid::kReverse);
	} else
	{
		scalerDblSolenoid->Set(DoubleSolenoid::kForward);
	}
}

bool Scaler::IsRaised()
{
	if (liftFwdIsExtened)
	{
		if (scalerLiftDblSolenoid->Get() == DoubleSolenoid::kForward) return true;
		return false;
	} else
	{
		if (scalerLiftDblSolenoid->Get() == DoubleSolenoid::kReverse) return true;
		return false;
	}
	return false;
}


bool Scaler::IsExtended()
{
	if (scalarFwdIsExtended)
	{
		if (scalerDblSolenoid->Get() == DoubleSolenoid::kForward) return true;
		return false;
	} else
	{
		if (scalerDblSolenoid->Get() == DoubleSolenoid::kReverse) return true;
		return false;
	}
	return false;
}
