// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ROBOTMAP_H
#define ROBOTMAP_H
#include "WPILib.h"
#include "AHRS.h"


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
class RobotMap {
public:
	static std::shared_ptr<CANTalon> driveTrainRightTalon2;
	static std::shared_ptr<CANTalon> driveTrainRightTalon1;
	static std::shared_ptr<CANTalon> driveTrainLeftTalon2;
	static std::shared_ptr<CANTalon> driveTrainLeftTalon1;
	static std::shared_ptr<RobotDrive> driveTrainRobotDrive;

	static std::shared_ptr<CANTalon> intakeTalon;
	static std::shared_ptr<CANTalon> shooterTopTalon;
	static std::shared_ptr<CANTalon> shooterBottomTalon;

	static std::shared_ptr<Compressor> theCompressor;
	static std::shared_ptr<Solenoid> brakeSolenoid;
	static std::shared_ptr<DoubleSolenoid> stabilizerSolenoid;
	static std::shared_ptr<Solenoid> pivotStage1Solenoid;
	static std::shared_ptr<Solenoid> pivotStage2Solenoid;
	static std::shared_ptr<Solenoid> scalerStage1Solenoid;
	static std::shared_ptr<Solenoid> scalerStage2Solenoid;

	static std::shared_ptr<PowerDistributionPanel> pDPPowerDistributionPanel;

	static std::shared_ptr<Encoder> pivotEncoder;
	static std::shared_ptr<AnalogInput> sensorIRdSensor;
	static std::shared_ptr<AnalogInput> sensorIRdSensorFront;
	static std::shared_ptr<AnalogInput> sensorIRdSensorTower;
	static std::shared_ptr<AnalogInput> pressureSensor;

	static std::shared_ptr<AHRS> imu;

	static void init();
};
#endif
